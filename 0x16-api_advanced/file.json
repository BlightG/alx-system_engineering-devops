{'kind': 'Listing', 'data': {'after': 't3_11c69yz', 'dist': 20, 'modhash': '', 'geo_filter': None, 'children': [{'kind': 't3', 'data': {'approved_at_utc': None, 'subreddit': 'Python', 'selftext': '', 'author_fullname': 't2_7vpi3es9', 'saved': False, 'mod_reason_title': None, 'gilded': 0, 'clicked': False, 'title': 'A no nonsense guide for adding columns to a df', 'link_flair_richtext': [{'e': 'text', 't': 'Tutorial'}], 'subreddit_name_prefixed': 'r/Python', 'hidden': False, 'pwls': 6, 'link_flair_css_class': 'tutorial', 'downs': 0, 'thumbnail_height': 98, 'top_awarded_type': None, 'hide_score': False, 'name': 't3_11dgk0b', 'quarantine': False, 'link_flair_text_color': 'dark', 'upvote_ratio': 1.0, 'author_flair_background_color': None, 'ups': 1, 'total_awards_received': 0, 'media_embed': {}, 'thumbnail_width': 140, 'author_flair_template_id': None, 'is_original_content': False, 'user_reports': [], 'secure_media': None, 'is_reddit_media_domain': False, 'is_meta': False, 'category': None, 'secure_media_embed': {}, 'link_flair_text': 'Tutorial', 'can_mod_post': False, 'score': 1, 'approved_by': None, 'is_created_from_ads_ui': False, 'author_premium': False, 'thumbnail': 'https://b.thumbs.redditmedia.com/C08SMZQFolwZTEd43-1AZmL37gKkRX0K-2bA9B8uU6I.jpg', 'edited': False, 'author_flair_css_class': None, 'author_flair_richtext': [], 'gildings': {}, 'post_hint': 'link', 'content_categories': None, 'is_self': False, 'subreddit_type': 'public', 'created': 1677516787.0, 'link_flair_type': 'richtext', 'wls': 6, 'removed_by_category': None, 'banned_by': None, 'author_flair_type': 'text', 'domain': 'blog.trymito.io', 'allow_live_comments': False, 'selftext_html': None, 'likes': None, 'suggested_sort': None, 'banned_at_utc': None, 'url_overridden_by_dest': 'https://blog.trymito.io/add-a-column-to-a-pandas-dataframe/', 'view_count': None, 'archived': False, 'no_follow': True, 'is_crosspostable': False, 'pinned': False, 'over_18': False, 'preview': {'images': [{'source': {'url': 'https://external-preview.redd.it/whO-tUhkl6k_Jl0DFM1C0ogOq9520RUjbhSlKdCysv0.jpg?auto=webp&amp;v=enabled&amp;s=9ff7051f337e335d18563c726d7c244b133f26f4', 'width': 5000, 'height': 3500}, 'resolutions': [{'url': 'https://external-preview.redd.it/whO-tUhkl6k_Jl0DFM1C0ogOq9520RUjbhSlKdCysv0.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;v=enabled&amp;s=423a950d1ce38a96ec3d95381ba4ba06f8832d06', 'width': 108, 'height': 75}, {'url': 'https://external-preview.redd.it/whO-tUhkl6k_Jl0DFM1C0ogOq9520RUjbhSlKdCysv0.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;v=enabled&amp;s=88c25a286ea85640bd3cb07259c63ea6cbfe83e0', 'width': 216, 'height': 151}, {'url': 'https://external-preview.redd.it/whO-tUhkl6k_Jl0DFM1C0ogOq9520RUjbhSlKdCysv0.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;v=enabled&amp;s=5a7eedcb5bf84c9d992b1f3717f71362f6c7d461', 'width': 320, 'height': 224}, {'url': 'https://external-preview.redd.it/whO-tUhkl6k_Jl0DFM1C0ogOq9520RUjbhSlKdCysv0.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;v=enabled&amp;s=f93fd7b09f37f6edca1890c7772ae3885179953d', 'width': 640, 'height': 448}, {'url': 'https://external-preview.redd.it/whO-tUhkl6k_Jl0DFM1C0ogOq9520RUjbhSlKdCysv0.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;v=enabled&amp;s=b3ea872b87df9eceff2d292b887f72a4ffb69c6f', 'width': 960, 'height': 672}, {'url': 'https://external-preview.redd.it/whO-tUhkl6k_Jl0DFM1C0ogOq9520RUjbhSlKdCysv0.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;v=enabled&amp;s=7dcf46e9d404e8246243dac4c10b27d234c2806f', 'width': 1080, 'height': 756}], 'variants': {}, 'id': '4Y55QpCpbLy1dJdjtwk3WSaENOBK22AizVs8dftlcFI'}], 'enabled': False}, 'all_awardings': [], 'awarders': [], 'media_only': False, 'link_flair_template_id': '7987a74c-04d8-11eb-84ca-0e0ac8b5a78f', 'can_gild': False, 'spoiler': False, 'locked': False, 'author_flair_text': None, 'treatment_tags': [], 'visited': False, 'removed_by': None, 'mod_note': None, 'distinguished': None, 'subreddit_id': 't5_2qh0y', 'author_is_blocked': False, 'mod_reason_by': None, 'num_reports': None, 'removal_reason': None, 'link_flair_background_color': '#dadada', 'id': '11dgk0b', 'is_robot_indexable': True, 'report_reasons': None, 'author': 'Jake_Stack808', 'discussion_type': None, 'num_comments': 0, 'send_replies': True, 'whitelist_status': 'all_ads', 'contest_mode': False, 'mod_reports': [], 'author_patreon_flair': False, 'author_flair_text_color': None, 'permalink': '/r/Python/comments/11dgk0b/a_no_nonsense_guide_for_adding_columns_to_a_df/', 'parent_whitelist_status': 'all_ads', 'stickied': False, 'url': 'https://blog.trymito.io/add-a-column-to-a-pandas-dataframe/', 'subreddit_subscribers': 1106345, 'created_utc': 1677516787.0, 'num_crossposts': 0, 'media': None, 'is_video': False}}, {'kind': 't3', 'data': {'approved_at_utc': None, 'subreddit': 'Python', 'selftext': '', 'author_fullname': 't2_6oa6v', 'saved': False, 'mod_reason_title': None, 'gilded': 0, 'clicked': False, 'title': 'PyCon US grants free booth space and conference passes to early-stage startups, and applications close Sunday at midnight Pacific Time', 'link_flair_richtext': [{'e': 'text', 't': 'Resource'}], 'subreddit_name_prefixed': 'r/Python', 'hidden': False, 'pwls': 6, 'link_flair_css_class': 'resource', 'downs': 0, 'thumbnail_height': None, 'top_awarded_type': None, 'hide_score': False, 'name': 't3_11cv65i', 'quarantine': False, 'link_flair_text_color': 'dark', 'upvote_ratio': 0.84, 'author_flair_background_color': None, 'subreddit_type': 'public', 'ups': 28, 'total_awards_received': 0, 'media_embed': {}, 'thumbnail_width': None, 'author_flair_template_id': None, 'is_original_content': False, 'user_reports': [], 'secure_media': None, 'is_reddit_media_domain': False, 'is_meta': False, 'category': None, 'secure_media_embed': {}, 'link_flair_text': 'Resource', 'can_mod_post': False, 'score': 28, 'approved_by': None, 'is_created_from_ads_ui': False, 'author_premium': True, 'thumbnail': 'default', 'edited': False, 'author_flair_css_class': None, 'author_flair_richtext': [], 'gildings': {}, 'content_categories': None, 'is_self': False, 'mod_note': None, 'created': 1677451367.0, 'link_flair_type': 'richtext', 'wls': 6, 'removed_by_category': None, 'banned_by': None, 'author_flair_type': 'text', 'domain': 'us.pycon.org', 'allow_live_comments': False, 'selftext_html': None, 'likes': None, 'suggested_sort': None, 'banned_at_utc': None, 'url_overridden_by_dest': 'https://us.pycon.org/2023/expo/startup-row/', 'view_count': None, 'archived': False, 'no_follow': False, 'is_crosspostable': False, 'pinned': False, 'over_18': False, 'all_awardings': [], 'awarders': [], 'media_only': False, 'link_flair_template_id': 'f9716fb2-4113-11ea-a3f1-0ef51f60f757', 'can_gild': False, 'spoiler': False, 'locked': False, 'author_flair_text': None, 'treatment_tags': [], 'visited': False, 'removed_by': None, 'num_reports': None, 'distinguished': None, 'subreddit_id': 't5_2qh0y', 'author_is_blocked': False, 'mod_reason_by': None, 'removal_reason': None, 'link_flair_background_color': '', 'id': '11cv65i', 'is_robot_indexable': True, 'report_reasons': None, 'author': 'jrowley', 'discussion_type': None, 'num_comments': 0, 'send_replies': True, 'whitelist_status': 'all_ads', 'contest_mode': False, 'mod_reports': [], 'author_patreon_flair': False, 'author_flair_text_color': None, 'permalink': '/r/Python/comments/11cv65i/pycon_us_grants_free_booth_space_and_conference/', 'parent_whitelist_status': 'all_ads', 'stickied': False, 'url': 'https://us.pycon.org/2023/expo/startup-row/', 'subreddit_subscribers': 1106345, 'created_utc': 1677451367.0, 'num_crossposts': 0, 'media': None, 'is_video': False}}, {'kind': 't3', 'data': {'approved_at_utc': None, 'subreddit': 'Python', 'selftext': "In orbital dynamics simulators, precision is key. In simulating a low-earth satellite in a circular orbit at an altitude of 650 km, this integrator produced an orbit which, after one complete orbit of the earth, deviated from the true value by...about 25 nanometers! That's about 1 part in 25 trillion per orbit. It is about 6 orders of magnitude more accurate that the very common Verlet integrator.\n\nAs far as I'm aware this is the first python implementation of this algorithm, called the Gauss-Jackson integrator. While it was originally intended to be used for space flight (it is allegedly the integrator being used by NASA to this day), by integrating the dynamics equation of motion, it can be used for any system of 2nd order differential equations, and with a little algebra on the user's side, any system of 1st order ODEs too.\n\nGitHub repo (with pictures and an example):  [https://github.com/lorcan2440/Gauss-Jackson-Integrator](https://github.com/lorcan2440/Gauss-Jackson-Integrator)\n\nMade by reading from this paper: [https://github.com/lorcan2440/Gauss-Jackson-Integrator/blob/master/GJ8%20Implementation.pdf](https://github.com/lorcan2440/Gauss-Jackson-Integrator/blob/master/GJ8%20Implementation.pdf)", 'author_fullname': 't2_5c38sqiv', 'saved': False, 'mod_reason_title': None, 'gilded': 0, 'clicked': False, 'title': 'A new implementation of a high-precision integrator algorithm for systems of second order differential equations', 'link_flair_richtext': [{'e': 'text', 't': 'Beginner Showcase'}], 'subreddit_name_prefixed': 'r/Python', 'hidden': False, 'pwls': 6, 'link_flair_css_class': 'beginner-showcase', 'downs': 0, 'thumbnail_height': None, 'top_awarded_type': None, 'hide_score': False, 'name': 't3_11coeve', 'quarantine': False, 'link_flair_text_color': 'light', 'upvote_ratio': 0.92, 'author_flair_background_color': None, 'subreddit_type': 'public', 'ups': 57, 'total_awards_received': 0, 'media_embed': {}, 'thumbnail_width': None, 'author_flair_template_id': None, 'is_original_content': False, 'user_reports': [], 'secure_media': None, 'is_reddit_media_domain': False, 'is_meta': False, 'category': None, 'secure_media_embed': {}, 'link_flair_text': 'Beginner Showcase', 'can_mod_post': False, 'score': 57, 'approved_by': None, 'is_created_from_ads_ui': False, 'author_premium': False, 'thumbnail': 'self', 'edited': 1677439884.0, 'author_flair_css_class': None, 'author_flair_richtext': [], 'gildings': {}, 'post_hint': 'self', 'content_categories': None, 'is_self': True, 'mod_note': None, 'created': 1677435425.0, 'link_flair_type': 'richtext', 'wls': 6, 'removed_by_category': None, 'banned_by': None, 'author_flair_type': 'text', 'domain': 'self.Python', 'allow_live_comments': False, 'selftext_html': '&lt;!-- SC_OFF --&gt;&lt;div class="md"&gt;&lt;p&gt;In orbital dynamics simulators, precision is key. In simulating a low-earth satellite in a circular orbit at an altitude of 650 km, this integrator produced an orbit which, after one complete orbit of the earth, deviated from the true value by...about 25 nanometers! That&amp;#39;s about 1 part in 25 trillion per orbit. It is about 6 orders of magnitude more accurate that the very common Verlet integrator.&lt;/p&gt;\n\n&lt;p&gt;As far as I&amp;#39;m aware this is the first python implementation of this algorithm, called the Gauss-Jackson integrator. While it was originally intended to be used for space flight (it is allegedly the integrator being used by NASA to this day), by integrating the dynamics equation of motion, it can be used for any system of 2nd order differential equations, and with a little algebra on the user&amp;#39;s side, any system of 1st order ODEs too.&lt;/p&gt;\n\n&lt;p&gt;GitHub repo (with pictures and an example):  &lt;a href="https://github.com/lorcan2440/Gauss-Jackson-Integrator"&gt;https://github.com/lorcan2440/Gauss-Jackson-Integrator&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Made by reading from this paper: &lt;a href="https://github.com/lorcan2440/Gauss-Jackson-Integrator/blob/master/GJ8%20Implementation.pdf"&gt;https://github.com/lorcan2440/Gauss-Jackson-Integrator/blob/master/GJ8%20Implementation.pdf&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;', 'likes': None, 'suggested_sort': None, 'banned_at_utc': None, 'view_count': None, 'archived': False, 'no_follow': False, 'is_crosspostable': False, 'pinned': False, 'over_18': False, 'preview': {'images': [{'source': {'url': 'https://external-preview.redd.it/7lyNKgR7ZFHCP61MXjjuKUcgqdgO5Ba3xcOIMji7lKg.jpg?auto=webp&amp;v=enabled&amp;s=8c44da0ae4584ca19808d115eecec277c85f3c0d', 'width': 1200, 'height': 600}, 'resolutions': [{'url': 'https://external-preview.redd.it/7lyNKgR7ZFHCP61MXjjuKUcgqdgO5Ba3xcOIMji7lKg.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;v=enabled&amp;s=b01ed1d45666d3b8eee6157bd2091aade5a0876e', 'width': 108, 'height': 54}, {'url': 'https://external-preview.redd.it/7lyNKgR7ZFHCP61MXjjuKUcgqdgO5Ba3xcOIMji7lKg.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;v=enabled&amp;s=611f3568b05e379e79050e2affa155edd394063e', 'width': 216, 'height': 108}, {'url': 'https://external-preview.redd.it/7lyNKgR7ZFHCP61MXjjuKUcgqdgO5Ba3xcOIMji7lKg.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;v=enabled&amp;s=cb883a9cddef43c083be11253e4ce1c9732d5f27', 'width': 320, 'height': 160}, {'url': 'https://external-preview.redd.it/7lyNKgR7ZFHCP61MXjjuKUcgqdgO5Ba3xcOIMji7lKg.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;v=enabled&amp;s=db2186bc919daabd7ca4f843c5a9de7324c30a05', 'width': 640, 'height': 320}, {'url': 'https://external-preview.redd.it/7lyNKgR7ZFHCP61MXjjuKUcgqdgO5Ba3xcOIMji7lKg.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;v=enabled&amp;s=da803a741b37bb426227028e07a6a0262becc5da', 'width': 960, 'height': 480}, {'url': 'https://external-preview.redd.it/7lyNKgR7ZFHCP61MXjjuKUcgqdgO5Ba3xcOIMji7lKg.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;v=enabled&amp;s=64cc98533c04f48e0c00592d48fade4b61182b59', 'width': 1080, 'height': 540}], 'variants': {}, 'id': 'mjdbYwU3t5czY1yINHoXER4aH449vTiXxWyhLH02BgE'}], 'enabled': False}, 'all_awardings': [], 'awarders': [], 'media_only': False, 'link_flair_template_id': '1678450a-cfa2-11ea-830c-0e5035839c63', 'can_gild': False, 'spoiler': False, 'locked': False, 'author_flair_text': None, 'treatment_tags': [], 'visited': False, 'removed_by': None, 'num_reports': None, 'distinguished': None, 'subreddit_id': 't5_2qh0y', 'author_is_blocked': False, 'mod_reason_by': None, 'removal_reason': None, 'link_flair_background_color': '#73ad34', 'id': '11coeve', 'is_robot_indexable': True, 'report_reasons': None, 'author': 'nick__2440', 'discussion_type': None, 'num_comments': 4, 'send_replies': True, 'whitelist_status': 'all_ads', 'contest_mode': False, 'mod_reports': [], 'author_patreon_flair': False, 'author_flair_text_color': None, 'permalink': '/r/Python/comments/11coeve/a_new_implementation_of_a_highprecision/', 'parent_whitelist_status': 'all_ads', 'stickied': False, 'url': 'https://www.reddit.com/r/Python/comments/11coeve/a_new_implementation_of_a_highprecision/', 'subreddit_subscribers': 1106345, 'created_utc': 1677435425.0, 'num_crossposts': 0, 'media': None, 'is_video': False}}, {'kind': 't3', 'data': {'approved_at_utc': None, 'subreddit': 'Python', 'selftext': "Pydantic made developing data driven apps WAY more fun for me.\n\nAnd I just discovered this Pydantic video that explains its features in a very clear and practical way:\n\n[https://www.youtube.com/watch?v=i4jespFbA1c](https://www.youtube.com/watch?v=i4jespFbA1c)\n\nThere's an accompanying blog post and dataset (on GitHub) too.\n\nI hope you'll enjoy it as much as I did.\n\nNow go code that awesome idea you have. \U0001faf5😀💻\n\n# Chapters\n\n* [00:00](https://www.youtube.com/watch?v=i4jespFbA1c&amp;t=0s) Intro\n* [01:13](https://www.youtube.com/watch?v=i4jespFbA1c&amp;t=73s) Analysis of the structure of the data to model\n* [02:47](https://www.youtube.com/watch?v=i4jespFbA1c&amp;t=167s) Installing Pydantic and Requests packages\n* [04:02](https://www.youtube.com/watch?v=i4jespFbA1c&amp;t=242s) Defining Pydantic model class\n* [06:22](https://www.youtube.com/watch?v=i4jespFbA1c&amp;t=382s) Creating Optional fields on the Pydantic model \n* [11:09](https://www.youtube.com/watch?v=i4jespFbA1c&amp;t=669s) Constrained fields in Pydantic\n* [15:23](https://www.youtube.com/watch?v=i4jespFbA1c&amp;t=923s) Using custom validator functions in Pydantic\n* [19:54](https://www.youtube.com/watch?v=i4jespFbA1c&amp;t=1194s) Using Enums as types in Pydantic models\n* [22:22](https://www.youtube.com/watch?v=i4jespFbA1c&amp;t=1342s) Exporting Pydantic models to dictionaries and JSON", 'author_fullname': 't2_fvwnhjy5', 'saved': False, 'mod_reason_title': None, 'gilded': 0, 'clicked': False, 'title': '🐍 Very clear Pydantic Introduction Video', 'link_flair_richtext': [{'e': 'text', 't': 'Tutorial'}], 'subreddit_name_prefixed': 'r/Python', 'hidden': False, 'pwls': 6, 'link_flair_css_class': 'tutorial', 'downs': 0, 'thumbnail_height': None, 'top_awarded_type': None, 'hide_score': False, 'name': 't3_11dapxk', 'quarantine': False, 'link_flair_text_color': 'dark', 'upvote_ratio': 0.5, 'author_flair_background_color': None, 'subreddit_type': 'public', 'ups': 0, 'total_awards_received': 0, 'media_embed': {}, 'thumbnail_width': None, 'author_flair_template_id': None, 'is_original_content': False, 'user_reports': [], 'secure_media': None, 'is_reddit_media_domain': False, 'is_meta': False, 'category': None, 'secure_media_embed': {}, 'link_flair_text': 'Tutorial', 'can_mod_post': False, 'score': 0, 'approved_by': None, 'is_created_from_ads_ui': False, 'author_premium': False, 'thumbnail': 'self', 'edited': False, 'author_flair_css_class': None, 'author_flair_richtext': [], 'gildings': {}, 'post_hint': 'self', 'content_categories': None, 'is_self': True, 'mod_note': None, 'created': 1677501026.0, 'link_flair_type': 'richtext', 'wls': 6, 'removed_by_category': None, 'banned_by': None, 'author_flair_type': 'text', 'domain': 'self.Python', 'allow_live_comments': False, 'selftext_html': '&lt;!-- SC_OFF --&gt;&lt;div class="md"&gt;&lt;p&gt;Pydantic made developing data driven apps WAY more fun for me.&lt;/p&gt;\n\n&lt;p&gt;And I just discovered this Pydantic video that explains its features in a very clear and practical way:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=i4jespFbA1c"&gt;https://www.youtube.com/watch?v=i4jespFbA1c&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;There&amp;#39;s an accompanying blog post and dataset (on GitHub) too.&lt;/p&gt;\n\n&lt;p&gt;I hope you&amp;#39;ll enjoy it as much as I did.&lt;/p&gt;\n\n&lt;p&gt;Now go code that awesome idea you have. \U0001faf5😀💻&lt;/p&gt;\n\n&lt;h1&gt;Chapters&lt;/h1&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=i4jespFbA1c&amp;amp;t=0s"&gt;00:00&lt;/a&gt; Intro&lt;/li&gt;\n&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=i4jespFbA1c&amp;amp;t=73s"&gt;01:13&lt;/a&gt; Analysis of the structure of the data to model&lt;/li&gt;\n&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=i4jespFbA1c&amp;amp;t=167s"&gt;02:47&lt;/a&gt; Installing Pydantic and Requests packages&lt;/li&gt;\n&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=i4jespFbA1c&amp;amp;t=242s"&gt;04:02&lt;/a&gt; Defining Pydantic model class&lt;/li&gt;\n&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=i4jespFbA1c&amp;amp;t=382s"&gt;06:22&lt;/a&gt; Creating Optional fields on the Pydantic model &lt;/li&gt;\n&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=i4jespFbA1c&amp;amp;t=669s"&gt;11:09&lt;/a&gt; Constrained fields in Pydantic&lt;/li&gt;\n&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=i4jespFbA1c&amp;amp;t=923s"&gt;15:23&lt;/a&gt; Using custom validator functions in Pydantic&lt;/li&gt;\n&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=i4jespFbA1c&amp;amp;t=1194s"&gt;19:54&lt;/a&gt; Using Enums as types in Pydantic models&lt;/li&gt;\n&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=i4jespFbA1c&amp;amp;t=1342s"&gt;22:22&lt;/a&gt; Exporting Pydantic models to dictionaries and JSON&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;', 'likes': None, 'suggested_sort': None, 'banned_at_utc': None, 'view_count': None, 'archived': False, 'no_follow': False, 'is_crosspostable': False, 'pinned': False, 'over_18': False, 'preview': {'images': [{'source': {'url': 'https://external-preview.redd.it/RwPRUd_-id3kcOchMRtix-OnBUnPCEwmsNrZ0D6B8XE.jpg?auto=webp&amp;v=enabled&amp;s=995b6bfdbd8e6ea6cfd8fb43cf5c03fdd58725c6', 'width': 480, 'height': 360}, 'resolutions': [{'url': 'https://external-preview.redd.it/RwPRUd_-id3kcOchMRtix-OnBUnPCEwmsNrZ0D6B8XE.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;v=enabled&amp;s=dda6150669ffe475313d2e59fc278161e4ab4aba', 'width': 108, 'height': 81}, {'url': 'https://external-preview.redd.it/RwPRUd_-id3kcOchMRtix-OnBUnPCEwmsNrZ0D6B8XE.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;v=enabled&amp;s=7901487db59758b3a9c7896df46c9657ef1ee499', 'width': 216, 'height': 162}, {'url': 'https://external-preview.redd.it/RwPRUd_-id3kcOchMRtix-OnBUnPCEwmsNrZ0D6B8XE.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;v=enabled&amp;s=4627c048748e55bcc82e49f3f2b285305f3224bc', 'width': 320, 'height': 240}], 'variants': {}, 'id': '2YXlllbxsnvqJeXDNWGM2-f_tueLoire2_PEMn4UGPk'}], 'enabled': False}, 'all_awardings': [], 'awarders': [], 'media_only': False, 'link_flair_template_id': '7987a74c-04d8-11eb-84ca-0e0ac8b5a78f', 'can_gild': False, 'spoiler': False, 'locked': False, 'author_flair_text': None, 'treatment_tags': [], 'visited': False, 'removed_by': None, 'num_reports': None, 'distinguished': None, 'subreddit_id': 't5_2qh0y', 'author_is_blocked': False, 'mod_reason_by': None, 'removal_reason': None, 'link_flair_background_color': '#dadada', 'id': '11dapxk', 'is_robot_indexable': True, 'report_reasons': None, 'author': 'ok-requirement-9559', 'discussion_type': None, 'num_comments': 3, 'send_replies': True, 'whitelist_status': 'all_ads', 'contest_mode': False, 'mod_reports': [], 'author_patreon_flair': False, 'author_flair_text_color': None, 'permalink': '/r/Python/comments/11dapxk/very_clear_pydantic_introduction_video/', 'parent_whitelist_status': 'all_ads', 'stickied': False, 'url': 'https://www.reddit.com/r/Python/comments/11dapxk/very_clear_pydantic_introduction_video/', 'subreddit_subscribers': 1106345, 'created_utc': 1677501026.0, 'num_crossposts': 0, 'media': None, 'is_video': False}}, {'kind': 't3', 'data': {'approved_at_utc': None, 'subreddit': 'Python', 'selftext': 'Hi, I am trying to decide between M2 Pro and M2 Max. For those who have used a Mac with these two new chips or M1 Pro and M2 Max, do you find that the extra GPU-core of the Max chips helpful?', 'author_fullname': 't2_1loeenr', 'saved': False, 'mod_reason_title': None, 'gilded': 0, 'clicked': False, 'title': "Can Python, related software and Anaconda take advantage of more GPU-core of Apple's M1 Max and M2 Max chips?", 'link_flair_richtext': [{'e': 'text', 't': 'Discussion'}], 'subreddit_name_prefixed': 'r/Python', 'hidden': False, 'pwls': 6, 'link_flair_css_class': 'discussion', 'downs': 0, 'thumbnail_height': None, 'top_awarded_type': None, 'hide_score': False, 'name': 't3_11dfe97', 'quarantine': False, 'link_flair_text_color': 'dark', 'upvote_ratio': 0.33, 'author_flair_background_color': None, 'subreddit_type': 'public', 'ups': 0, 'total_awards_received': 0, 'media_embed': {}, 'thumbnail_width': None, 'author_flair_template_id': None, 'is_original_content': False, 'user_reports': [], 'secure_media': None, 'is_reddit_media_domain': False, 'is_meta': False, 'category': None, 'secure_media_embed': {}, 'link_flair_text': 'Discussion', 'can_mod_post': False, 'score': 0, 'approved_by': None, 'is_created_from_ads_ui': False, 'author_premium': False, 'thumbnail': 'self', 'edited': False, 'author_flair_css_class': None, 'author_flair_richtext': [], 'gildings': {}, 'content_categories': None, 'is_self': True, 'mod_note': None, 'created': 1677513849.0, 'link_flair_type': 'richtext', 'wls': 6, 'removed_by_category': None, 'banned_by': None, 'author_flair_type': 'text', 'domain': 'self.Python', 'allow_live_comments': False, 'selftext_html': '&lt;!-- SC_OFF --&gt;&lt;div class="md"&gt;&lt;p&gt;Hi, I am trying to decide between M2 Pro and M2 Max. For those who have used a Mac with these two new chips or M1 Pro and M2 Max, do you find that the extra GPU-core of the Max chips helpful?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;', 'likes': None, 'suggested_sort': None, 'banned_at_utc': None, 'view_count': None, 'archived': False, 'no_follow': True, 'is_crosspostable': False, 'pinned': False, 'over_18': False, 'all_awardings': [], 'awarders': [], 'media_only': False, 'link_flair_template_id': '0df42996-1c5e-11ea-b1a0-0e44e1c5b731', 'can_gild': False, 'spoiler': False, 'locked': False, 'author_flair_text': None, 'treatment_tags': [], 'visited': False, 'removed_by': None, 'num_reports': None, 'distinguished': None, 'subreddit_id': 't5_2qh0y', 'author_is_blocked': False, 'mod_reason_by': None, 'removal_reason': None, 'link_flair_background_color': '', 'id': '11dfe97', 'is_robot_indexable': True, 'report_reasons': None, 'author': 'largelcd', 'discussion_type': None, 'num_comments': 1, 'send_replies': True, 'whitelist_status': 'all_ads', 'contest_mode': False, 'mod_reports': [], 'author_patreon_flair': False, 'author_flair_text_color': None, 'permalink': '/r/Python/comments/11dfe97/can_python_related_software_and_anaconda_take/', 'parent_whitelist_status': 'all_ads', 'stickied': False, 'url': 'https://www.reddit.com/r/Python/comments/11dfe97/can_python_related_software_and_anaconda_take/', 'subreddit_subscribers': 1106345, 'created_utc': 1677513849.0, 'num_crossposts': 0, 'media': None, 'is_video': False}}, {'kind': 't3', 'data': {'approved_at_utc': None, 'subreddit': 'Python', 'selftext': 'Hi all 👋,\n\nHere is the newest and latest update [Starlite](https://github.com/starlite-api/starlite) - the blazingly fast ASGI API framework!\n\nFirst off, we got a new logo, new docs and our own domain - check it out at https://starliteproject.dev/.\n\nThe big news is that we are working hard on releasing v2.0, for which we plan to release a first Release Candidate in early March. \n\nV2.0 will introduce a lot if improvements and additions, with some highlights being:\n\n1. SQL Alchemy 2.0 Support.\n2. Rewritten DTOs\n3. Improved Performance\n4. A builtin event bus and "signals"\n5. HTMX support\n6. SAQ support\n7. Improvements to caching and sessions\n\nAnd more!\n\nWe decided upon our long term versioning strategy - Starlite will adhere to strict Semver, which means no breaking changes except in major versions. And we will release major versions more often (at least once a year if not more). \n\nWe will keep the last minor version of the previous major version as a maintenance version. Thus, v1.51.* is now a maintenance version, and it keeps receiving bug fixes and dependency updates 1.51.5 is the current patch). \n\nThe other news is the [discord server](https://discord.gg/X3FJqy8d2j), which got a major overhaul. We now have 3 moderators who maintain it. \n\nAs always, we welcome contributors of all kinds. Join us on discord or our GitHub.', 'author_fullname': 't2_9t15mit', 'saved': False, 'mod_reason_title': None, 'gilded': 0, 'clicked': False, 'title': 'Starlite February Updates', 'link_flair_richtext': [{'e': 'text', 't': 'News'}], 'subreddit_name_prefixed': 'r/Python', 'hidden': False, 'pwls': 6, 'link_flair_css_class': 'news', 'downs': 0, 'thumbnail_height': None, 'top_awarded_type': None, 'hide_score': False, 'name': 't3_11cdih0', 'quarantine': False, 'link_flair_text_color': 'dark', 'upvote_ratio': 0.89, 'author_flair_background_color': None, 'subreddit_type': 'public', 'ups': 200, 'total_awards_received': 0, 'media_embed': {}, 'thumbnail_width': None, 'author_flair_template_id': None, 'is_original_content': False, 'user_reports': [], 'secure_media': None, 'is_reddit_media_domain': False, 'is_meta': False, 'category': None, 'secure_media_embed': {}, 'link_flair_text': 'News', 'can_mod_post': False, 'score': 200, 'approved_by': None, 'is_created_from_ads_ui': False, 'author_premium': False, 'thumbnail': 'self', 'edited': False, 'author_flair_css_class': None, 'author_flair_richtext': [], 'gildings': {}, 'post_hint': 'self', 'content_categories': None, 'is_self': True, 'mod_note': None, 'created': 1677409983.0, 'link_flair_type': 'richtext', 'wls': 6, 'removed_by_category': None, 'banned_by': None, 'author_flair_type': 'text', 'domain': 'self.Python', 'allow_live_comments': False, 'selftext_html': '&lt;!-- SC_OFF --&gt;&lt;div class="md"&gt;&lt;p&gt;Hi all 👋,&lt;/p&gt;\n\n&lt;p&gt;Here is the newest and latest update &lt;a href="https://github.com/starlite-api/starlite"&gt;Starlite&lt;/a&gt; - the blazingly fast ASGI API framework!&lt;/p&gt;\n\n&lt;p&gt;First off, we got a new logo, new docs and our own domain - check it out at &lt;a href="https://starliteproject.dev/"&gt;https://starliteproject.dev/&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;The big news is that we are working hard on releasing v2.0, for which we plan to release a first Release Candidate in early March. &lt;/p&gt;\n\n&lt;p&gt;V2.0 will introduce a lot if improvements and additions, with some highlights being:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;SQL Alchemy 2.0 Support.&lt;/li&gt;\n&lt;li&gt;Rewritten DTOs&lt;/li&gt;\n&lt;li&gt;Improved Performance&lt;/li&gt;\n&lt;li&gt;A builtin event bus and &amp;quot;signals&amp;quot;&lt;/li&gt;\n&lt;li&gt;HTMX support&lt;/li&gt;\n&lt;li&gt;SAQ support&lt;/li&gt;\n&lt;li&gt;Improvements to caching and sessions&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;And more!&lt;/p&gt;\n\n&lt;p&gt;We decided upon our long term versioning strategy - Starlite will adhere to strict Semver, which means no breaking changes except in major versions. And we will release major versions more often (at least once a year if not more). &lt;/p&gt;\n\n&lt;p&gt;We will keep the last minor version of the previous major version as a maintenance version. Thus, v1.51.* is now a maintenance version, and it keeps receiving bug fixes and dependency updates 1.51.5 is the current patch). &lt;/p&gt;\n\n&lt;p&gt;The other news is the &lt;a href="https://discord.gg/X3FJqy8d2j"&gt;discord server&lt;/a&gt;, which got a major overhaul. We now have 3 moderators who maintain it. &lt;/p&gt;\n\n&lt;p&gt;As always, we welcome contributors of all kinds. Join us on discord or our GitHub.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;', 'likes': None, 'suggested_sort': None, 'banned_at_utc': None, 'view_count': None, 'archived': False, 'no_follow': False, 'is_crosspostable': False, 'pinned': False, 'over_18': False, 'preview': {'images': [{'source': {'url': 'https://external-preview.redd.it/1ox82bwRhxQz5p0PUC5hhmX3C1s-ZOIt6VSML9YjMYg.jpg?auto=webp&amp;v=enabled&amp;s=5fed1b6fef916f224e1dc7acee2e0c4e0e8166ba', 'width': 3000, 'height': 1688}, 'resolutions': [{'url': 'https://external-preview.redd.it/1ox82bwRhxQz5p0PUC5hhmX3C1s-ZOIt6VSML9YjMYg.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;v=enabled&amp;s=e1ff229d111d892d7e78b16a8d0c6066231f1eab', 'width': 108, 'height': 60}, {'url': 'https://external-preview.redd.it/1ox82bwRhxQz5p0PUC5hhmX3C1s-ZOIt6VSML9YjMYg.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;v=enabled&amp;s=3ba1330556b41372970fdc2ad0fe22d79919de05', 'width': 216, 'height': 121}, {'url': 'https://external-preview.redd.it/1ox82bwRhxQz5p0PUC5hhmX3C1s-ZOIt6VSML9YjMYg.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;v=enabled&amp;s=417680dc560bc3e654693c814c6cb32a53cc793e', 'width': 320, 'height': 180}, {'url': 'https://external-preview.redd.it/1ox82bwRhxQz5p0PUC5hhmX3C1s-ZOIt6VSML9YjMYg.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;v=enabled&amp;s=2ab334b948ff5ef51b0c3124b2a6e7b427e75962', 'width': 640, 'height': 360}, {'url': 'https://external-preview.redd.it/1ox82bwRhxQz5p0PUC5hhmX3C1s-ZOIt6VSML9YjMYg.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;v=enabled&amp;s=f018660b5c749131f330ea48e582a2870d82a23b', 'width': 960, 'height': 540}, {'url': 'https://external-preview.redd.it/1ox82bwRhxQz5p0PUC5hhmX3C1s-ZOIt6VSML9YjMYg.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;v=enabled&amp;s=81b1df8ebbede22d3be1afb9532114d49dbcf20b', 'width': 1080, 'height': 607}], 'variants': {}, 'id': 'Cp_eIGl4j4A70crnUH1-oE-OGEq7rIxVwasLecJ58MY'}], 'enabled': False}, 'all_awardings': [], 'awarders': [], 'media_only': False, 'link_flair_template_id': '0ad780a0-1c5e-11ea-978c-0ee7bacb2bff', 'can_gild': False, 'spoiler': False, 'locked': False, 'author_flair_text': None, 'treatment_tags': [], 'visited': False, 'removed_by': None, 'num_reports': None, 'distinguished': None, 'subreddit_id': 't5_2qh0y', 'author_is_blocked': False, 'mod_reason_by': None, 'removal_reason': None, 'link_flair_background_color': '', 'id': '11cdih0', 'is_robot_indexable': True, 'report_reasons': None, 'author': 'Goldziher', 'discussion_type': None, 'num_comments': 25, 'send_replies': True, 'whitelist_status': 'all_ads', 'contest_mode': False, 'mod_reports': [], 'author_patreon_flair': False, 'author_flair_text_color': None, 'permalink': '/r/Python/comments/11cdih0/starlite_february_updates/', 'parent_whitelist_status': 'all_ads', 'stickied': False, 'url': 'https://www.reddit.com/r/Python/comments/11cdih0/starlite_february_updates/', 'subreddit_subscribers': 1106345, 'created_utc': 1677409983.0, 'num_crossposts': 1, 'media': None, 'is_video': False}}, {'kind': 't3', 'data': {'approved_at_utc': None, 'subreddit': 'Python', 'selftext': '', 'author_fullname': 't2_10zh16', 'saved': False, 'mod_reason_title': None, 'gilded': 0, 'clicked': False, 'title': 'Cython 3.0 beta 1 is released', 'link_flair_richtext': [{'e': 'text', 't': 'News'}], 'subreddit_name_prefixed': 'r/Python', 'hidden': False, 'pwls': 6, 'link_flair_css_class': 'news', 'downs': 0, 'thumbnail_height': None, 'top_awarded_type': None, 'hide_score': False, 'name': 't3_11chg45', 'quarantine': False, 'link_flair_text_color': 'dark', 'upvote_ratio': 0.95, 'author_flair_background_color': None, 'subreddit_type': 'public', 'ups': 113, 'total_awards_received': 0, 'media_embed': {}, 'thumbnail_width': None, 'author_flair_template_id': None, 'is_original_content': False, 'user_reports': [], 'secure_media': None, 'is_reddit_media_domain': False, 'is_meta': False, 'category': None, 'secure_media_embed': {}, 'link_flair_text': 'News', 'can_mod_post': False, 'score': 113, 'approved_by': None, 'is_created_from_ads_ui': False, 'author_premium': False, 'thumbnail': 'default', 'edited': False, 'author_flair_css_class': None, 'author_flair_richtext': [], 'gildings': {}, 'content_categories': None, 'is_self': False, 'mod_note': None, 'created': 1677418915.0, 'link_flair_type': 'richtext', 'wls': 6, 'removed_by_category': None, 'banned_by': None, 'author_flair_type': 'text', 'domain': 'groups.google.com', 'allow_live_comments': True, 'selftext_html': None, 'likes': None, 'suggested_sort': None, 'banned_at_utc': None, 'url_overridden_by_dest': 'https://groups.google.com/g/cython-users/c/avxEDypPB6k', 'view_count': None, 'archived': False, 'no_follow': False, 'is_crosspostable': False, 'pinned': False, 'over_18': False, 'all_awardings': [], 'awarders': [], 'media_only': False, 'link_flair_template_id': '0ad780a0-1c5e-11ea-978c-0ee7bacb2bff', 'can_gild': False, 'spoiler': False, 'locked': False, 'author_flair_text': None, 'treatment_tags': [], 'visited': False, 'removed_by': None, 'num_reports': None, 'distinguished': None, 'subreddit_id': 't5_2qh0y', 'author_is_blocked': False, 'mod_reason_by': None, 'removal_reason': None, 'link_flair_background_color': '', 'id': '11chg45', 'is_robot_indexable': True, 'report_reasons': None, 'author': 'johnnydrama92', 'discussion_type': None, 'num_comments': 13, 'send_replies': True, 'whitelist_status': 'all_ads', 'contest_mode': False, 'mod_reports': [], 'author_patreon_flair': False, 'author_flair_text_color': None, 'permalink': '/r/Python/comments/11chg45/cython_30_beta_1_is_released/', 'parent_whitelist_status': 'all_ads', 'stickied': False, 'url': 'https://groups.google.com/g/cython-users/c/avxEDypPB6k', 'subreddit_subscribers': 1106345, 'created_utc': 1677418915.0, 'num_crossposts': 0, 'media': None, 'is_video': False}}, {'kind': 't3', 'data': {'approved_at_utc': None, 'subreddit': 'Python', 'selftext': "[hyper-bump-it](https://github.com/plannigan/hyper-bump-it) is a command line tool for updating the version in project files needed for the next release. The [documentation](https://plannigan.github.io/hyper-bump-it/latest/) details how to configure and use it. There is a page [compares it with similar tools](https://plannigan.github.io/hyper-bump-it/latest/why-hyper-bump-it/).\n\n`hyper-bump-it`'s features include:\n\n* Updating the version to a new fully specified value or increasing the version based on a specific version part\n* Optional Git integrations\n* Customizable search and replacement patterns\n* Safe by default\n* TOML configuration file (can be part of `pyproject.toml`)\n\nv0.4.0 was released today adding:\n\n* Multi-line search and replacement pasterns\n* Displaying planned changes in the unified diff format\n* Search pattern can match arbitrary dates in addition to the current version.", 'author_fullname': 't2_w0yqko2l', 'saved': False, 'mod_reason_title': None, 'gilded': 0, 'clicked': False, 'title': 'hyper-bump-it: Bump the version for a software release', 'link_flair_richtext': [{'e': 'text', 't': 'Intermediate Showcase'}], 'subreddit_name_prefixed': 'r/Python', 'hidden': False, 'pwls': 6, 'link_flair_css_class': 'intermediate-showcase', 'downs': 0, 'thumbnail_height': None, 'top_awarded_type': None, 'hide_score': False, 'name': 't3_11dd2cr', 'quarantine': False, 'link_flair_text_color': 'light', 'upvote_ratio': 0.57, 'author_flair_background_color': None, 'subreddit_type': 'public', 'ups': 1, 'total_awards_received': 0, 'media_embed': {}, 'thumbnail_width': None, 'author_flair_template_id': None, 'is_original_content': False, 'user_reports': [], 'secure_media': None, 'is_reddit_media_domain': False, 'is_meta': False, 'category': None, 'secure_media_embed': {}, 'link_flair_text': 'Intermediate Showcase', 'can_mod_post': False, 'score': 1, 'approved_by': None, 'is_created_from_ads_ui': False, 'author_premium': False, 'thumbnail': 'self', 'edited': False, 'author_flair_css_class': None, 'author_flair_richtext': [], 'gildings': {}, 'post_hint': 'self', 'content_categories': None, 'is_self': True, 'mod_note': None, 'created': 1677507868.0, 'link_flair_type': 'richtext', 'wls': 6, 'removed_by_category': None, 'banned_by': None, 'author_flair_type': 'text', 'domain': 'self.Python', 'allow_live_comments': False, 'selftext_html': '&lt;!-- SC_OFF --&gt;&lt;div class="md"&gt;&lt;p&gt;&lt;a href="https://github.com/plannigan/hyper-bump-it"&gt;hyper-bump-it&lt;/a&gt; is a command line tool for updating the version in project files needed for the next release. The &lt;a href="https://plannigan.github.io/hyper-bump-it/latest/"&gt;documentation&lt;/a&gt; details how to configure and use it. There is a page &lt;a href="https://plannigan.github.io/hyper-bump-it/latest/why-hyper-bump-it/"&gt;compares it with similar tools&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;hyper-bump-it&lt;/code&gt;&amp;#39;s features include:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Updating the version to a new fully specified value or increasing the version based on a specific version part&lt;/li&gt;\n&lt;li&gt;Optional Git integrations&lt;/li&gt;\n&lt;li&gt;Customizable search and replacement patterns&lt;/li&gt;\n&lt;li&gt;Safe by default&lt;/li&gt;\n&lt;li&gt;TOML configuration file (can be part of &lt;code&gt;pyproject.toml&lt;/code&gt;)&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;v0.4.0 was released today adding:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Multi-line search and replacement pasterns&lt;/li&gt;\n&lt;li&gt;Displaying planned changes in the unified diff format&lt;/li&gt;\n&lt;li&gt;Search pattern can match arbitrary dates in addition to the current version.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;', 'likes': None, 'suggested_sort': None, 'banned_at_utc': None, 'view_count': None, 'archived': False, 'no_follow': True, 'is_crosspostable': False, 'pinned': False, 'over_18': False, 'preview': {'images': [{'source': {'url': 'https://external-preview.redd.it/udvv8zgpBo5ppeG_5hbq0YQmOdQyjfg84r1dMKrRCSI.jpg?auto=webp&amp;v=enabled&amp;s=c8a9c8c5ba067fb5e7e791c0455a7a3da4c9b4af', 'width': 1200, 'height': 600}, 'resolutions': [{'url': 'https://external-preview.redd.it/udvv8zgpBo5ppeG_5hbq0YQmOdQyjfg84r1dMKrRCSI.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;v=enabled&amp;s=385d7c13e3dbbca253be4689774870a16948613f', 'width': 108, 'height': 54}, {'url': 'https://external-preview.redd.it/udvv8zgpBo5ppeG_5hbq0YQmOdQyjfg84r1dMKrRCSI.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;v=enabled&amp;s=fa1f38715ae39385db3359185fb508adaf95aa78', 'width': 216, 'height': 108}, {'url': 'https://external-preview.redd.it/udvv8zgpBo5ppeG_5hbq0YQmOdQyjfg84r1dMKrRCSI.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;v=enabled&amp;s=a6096e6897ed27b62012fb577c98c7829eb540ab', 'width': 320, 'height': 160}, {'url': 'https://external-preview.redd.it/udvv8zgpBo5ppeG_5hbq0YQmOdQyjfg84r1dMKrRCSI.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;v=enabled&amp;s=01a391cca7f7a5898624c4d3f7912f876cb279b7', 'width': 640, 'height': 320}, {'url': 'https://external-preview.redd.it/udvv8zgpBo5ppeG_5hbq0YQmOdQyjfg84r1dMKrRCSI.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;v=enabled&amp;s=7933da6eb221a21d2bfd534fd94e1575cc0a08f0', 'width': 960, 'height': 480}, {'url': 'https://external-preview.redd.it/udvv8zgpBo5ppeG_5hbq0YQmOdQyjfg84r1dMKrRCSI.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;v=enabled&amp;s=7d7b064dc3daf657dcafb0407fa492153deae598', 'width': 1080, 'height': 540}], 'variants': {}, 'id': 'xqXlvMl9KZ7vT_3NgX6GodkX9C_aFymKciOQm6dVVIQ'}], 'enabled': False}, 'all_awardings': [], 'awarders': [], 'media_only': False, 'link_flair_template_id': '23ba6f68-cfa2-11ea-96b4-0e31bcb4ff77', 'can_gild': False, 'spoiler': False, 'locked': False, 'author_flair_text': None, 'treatment_tags': [], 'visited': False, 'removed_by': None, 'num_reports': None, 'distinguished': None, 'subreddit_id': 't5_2qh0y', 'author_is_blocked': False, 'mod_reason_by': None, 'removal_reason': None, 'link_flair_background_color': '#ea0027', 'id': '11dd2cr', 'is_robot_indexable': True, 'report_reasons': None, 'author': 'hypercubetools', 'discussion_type': None, 'num_comments': 2, 'send_replies': True, 'whitelist_status': 'all_ads', 'contest_mode': False, 'mod_reports': [], 'author_patreon_flair': False, 'author_flair_text_color': None, 'permalink': '/r/Python/comments/11dd2cr/hyperbumpit_bump_the_version_for_a_software/', 'parent_whitelist_status': 'all_ads', 'stickied': False, 'url': 'https://www.reddit.com/r/Python/comments/11dd2cr/hyperbumpit_bump_the_version_for_a_software/', 'subreddit_subscribers': 1106345, 'created_utc': 1677507868.0, 'num_crossposts': 0, 'media': None, 'is_video': False}}, {'kind': 't3', 'data': {'approved_at_utc': None, 'subreddit': 'Python', 'selftext': "Hi everyone. I hope you are doing well. A couple of weeks ago, I wrote an article on building an instantaneous application using Python and WebSockets. Today I wrote a follow-up article where I added MongoDB to store the messages and create messaging rooms. This is part two of a three-part series of articles on building an instant messaging application.\n\nHere's a link to the article [Link](https://medium.com/@abderraoufbenchoubane/building-an-instant-messaging-application-using-python-and-websockets-part-2-83b1b9d2435a). I hope it's helpful to you.\n\nI would appreciate it if you could take the time to read the article. Feel free to let me know if you like it or not, I'm always looking for ways to improve, and this community has been great at that.\n\nThank you, and have a nice day", 'author_fullname': 't2_gjd3ldua', 'saved': False, 'mod_reason_title': None, 'gilded': 0, 'clicked': False, 'title': 'Building an instantaneous application using Python and WebSockets [Part 2]', 'link_flair_richtext': [{'e': 'text', 't': 'Tutorial'}], 'subreddit_name_prefixed': 'r/Python', 'hidden': False, 'pwls': 6, 'link_flair_css_class': 'tutorial', 'downs': 0, 'thumbnail_height': None, 'top_awarded_type': None, 'hide_score': False, 'name': 't3_11dd21x', 'quarantine': False, 'link_flair_text_color': 'dark', 'upvote_ratio': 0.6, 'author_flair_background_color': None, 'subreddit_type': 'public', 'ups': 1, 'total_awards_received': 0, 'media_embed': {}, 'thumbnail_width': None, 'author_flair_template_id': None, 'is_original_content': False, 'user_reports': [], 'secure_media': None, 'is_reddit_media_domain': False, 'is_meta': False, 'category': None, 'secure_media_embed': {}, 'link_flair_text': 'Tutorial', 'can_mod_post': False, 'score': 1, 'approved_by': None, 'is_created_from_ads_ui': False, 'author_premium': False, 'thumbnail': 'self', 'edited': False, 'author_flair_css_class': None, 'author_flair_richtext': [], 'gildings': {}, 'post_hint': 'self', 'content_categories': None, 'is_self': True, 'mod_note': None, 'created': 1677507847.0, 'link_flair_type': 'richtext', 'wls': 6, 'removed_by_category': None, 'banned_by': None, 'author_flair_type': 'text', 'domain': 'self.Python', 'allow_live_comments': False, 'selftext_html': '&lt;!-- SC_OFF --&gt;&lt;div class="md"&gt;&lt;p&gt;Hi everyone. I hope you are doing well. A couple of weeks ago, I wrote an article on building an instantaneous application using Python and WebSockets. Today I wrote a follow-up article where I added MongoDB to store the messages and create messaging rooms. This is part two of a three-part series of articles on building an instant messaging application.&lt;/p&gt;\n\n&lt;p&gt;Here&amp;#39;s a link to the article &lt;a href="https://medium.com/@abderraoufbenchoubane/building-an-instant-messaging-application-using-python-and-websockets-part-2-83b1b9d2435a"&gt;Link&lt;/a&gt;. I hope it&amp;#39;s helpful to you.&lt;/p&gt;\n\n&lt;p&gt;I would appreciate it if you could take the time to read the article. Feel free to let me know if you like it or not, I&amp;#39;m always looking for ways to improve, and this community has been great at that.&lt;/p&gt;\n\n&lt;p&gt;Thank you, and have a nice day&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;', 'likes': None, 'suggested_sort': None, 'banned_at_utc': None, 'view_count': None, 'archived': False, 'no_follow': True, 'is_crosspostable': False, 'pinned': False, 'over_18': False, 'preview': {'images': [{'source': {'url': 'https://external-preview.redd.it/ZOdgLtqjT9pOyjTNaVQVrU55MhBhlGSZixFkuNqtzIw.jpg?auto=webp&amp;v=enabled&amp;s=76e4c7b63a8a100ef648fe67b55de41b68b5f248', 'width': 500, 'height': 313}, 'resolutions': [{'url': 'https://external-preview.redd.it/ZOdgLtqjT9pOyjTNaVQVrU55MhBhlGSZixFkuNqtzIw.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;v=enabled&amp;s=f87a370f5023904155ba941bceb58b28187d3ed1', 'width': 108, 'height': 67}, {'url': 'https://external-preview.redd.it/ZOdgLtqjT9pOyjTNaVQVrU55MhBhlGSZixFkuNqtzIw.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;v=enabled&amp;s=e8848f618489eb31f7dab76b18ecb0abc4470ebd', 'width': 216, 'height': 135}, {'url': 'https://external-preview.redd.it/ZOdgLtqjT9pOyjTNaVQVrU55MhBhlGSZixFkuNqtzIw.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;v=enabled&amp;s=956213cabbb4d6ccb704974128ee3df349adfbf2', 'width': 320, 'height': 200}], 'variants': {}, 'id': 'CkKovu7rsC5X_pcMAJX8fBmEbiFv0eWnruE0ZgRY_y8'}], 'enabled': False}, 'all_awardings': [], 'awarders': [], 'media_only': False, 'link_flair_template_id': '7987a74c-04d8-11eb-84ca-0e0ac8b5a78f', 'can_gild': False, 'spoiler': False, 'locked': False, 'author_flair_text': None, 'treatment_tags': [], 'visited': False, 'removed_by': None, 'num_reports': None, 'distinguished': None, 'subreddit_id': 't5_2qh0y', 'author_is_blocked': False, 'mod_reason_by': None, 'removal_reason': None, 'link_flair_background_color': '#dadada', 'id': '11dd21x', 'is_robot_indexable': True, 'report_reasons': None, 'author': 'loves_code_math', 'discussion_type': None, 'num_comments': 0, 'send_replies': True, 'whitelist_status': 'all_ads', 'contest_mode': False, 'mod_reports': [], 'author_patreon_flair': False, 'author_flair_text_color': None, 'permalink': '/r/Python/comments/11dd21x/building_an_instantaneous_application_using/', 'parent_whitelist_status': 'all_ads', 'stickied': False, 'url': 'https://www.reddit.com/r/Python/comments/11dd21x/building_an_instantaneous_application_using/', 'subreddit_subscribers': 1106345, 'created_utc': 1677507847.0, 'num_crossposts': 0, 'media': None, 'is_video': False}}, {'kind': 't3', 'data': {'approved_at_utc': None, 'subreddit': 'Python', 'selftext': '', 'author_fullname': 't2_ryja0co', 'saved': False, 'mod_reason_title': None, 'gilded': 0, 'clicked': False, 'title': 'convtools: are we really DRY?', 'link_flair_richtext': [{'e': 'text', 't': 'Resource'}], 'subreddit_name_prefixed': 'r/Python', 'hidden': False, 'pwls': 6, 'link_flair_css_class': 'resource', 'downs': 0, 'thumbnail_height': None, 'top_awarded_type': None, 'hide_score': False, 'name': 't3_11dc6jb', 'quarantine': False, 'link_flair_text_color': 'dark', 'upvote_ratio': 0.4, 'author_flair_background_color': None, 'subreddit_type': 'public', 'ups': 0, 'total_awards_received': 0, 'media_embed': {}, 'thumbnail_width': None, 'author_flair_template_id': None, 'is_original_content': False, 'user_reports': [], 'secure_media': None, 'is_reddit_media_domain': False, 'is_meta': False, 'category': None, 'secure_media_embed': {}, 'link_flair_text': 'Resource', 'can_mod_post': False, 'score': 0, 'approved_by': None, 'is_created_from_ads_ui': False, 'author_premium': False, 'thumbnail': 'default', 'edited': False, 'author_flair_css_class': None, 'author_flair_richtext': [], 'gildings': {}, 'content_categories': None, 'is_self': False, 'mod_note': None, 'created': 1677505472.0, 'link_flair_type': 'richtext', 'wls': 6, 'removed_by_category': None, 'banned_by': None, 'author_flair_type': 'text', 'domain': 'medium.com', 'allow_live_comments': False, 'selftext_html': None, 'likes': None, 'suggested_sort': None, 'banned_at_utc': None, 'url_overridden_by_dest': 'https://medium.com/@nikita.almakov/convtools-are-we-really-dry-8f5fc350b98c', 'view_count': None, 'archived': False, 'no_follow': True, 'is_crosspostable': False, 'pinned': False, 'over_18': False, 'all_awardings': [], 'awarders': [], 'media_only': False, 'link_flair_template_id': 'f9716fb2-4113-11ea-a3f1-0ef51f60f757', 'can_gild': False, 'spoiler': False, 'locked': False, 'author_flair_text': None, 'treatment_tags': [], 'visited': False, 'removed_by': None, 'num_reports': None, 'distinguished': None, 'subreddit_id': 't5_2qh0y', 'author_is_blocked': False, 'mod_reason_by': None, 'removal_reason': None, 'link_flair_background_color': '', 'id': '11dc6jb', 'is_robot_indexable': True, 'report_reasons': None, 'author': 'nikita_almakov', 'discussion_type': None, 'num_comments': 0, 'send_replies': False, 'whitelist_status': 'all_ads', 'contest_mode': False, 'mod_reports': [], 'author_patreon_flair': False, 'author_flair_text_color': None, 'permalink': '/r/Python/comments/11dc6jb/convtools_are_we_really_dry/', 'parent_whitelist_status': 'all_ads', 'stickied': False, 'url': 'https://medium.com/@nikita.almakov/convtools-are-we-really-dry-8f5fc350b98c', 'subreddit_subscribers': 1106345, 'created_utc': 1677505472.0, 'num_crossposts': 0, 'media': None, 'is_video': False}}, {'kind': 't3', 'data': {'approved_at_utc': None, 'subreddit': 'Python', 'selftext': "Hey everyone!\n\nI'm working on developer-first alerting CLI so every developer will be able to create alerts within their IDE, keep (pun intended) it close to the code, and integrate it with their CI/CD.\n\nEvery insight/interesting use case is welcome (feel free to create an issue in the repository and I'll get to it asap)\n\n&amp;#x200B;\n\n[https://github.com/keephq/keep](https://github.com/keephq/keep)", 'author_fullname': 't2_7jte6dzt', 'saved': False, 'mod_reason_title': None, 'gilded': 0, 'clicked': False, 'title': 'Open-source alerting CLI', 'link_flair_richtext': [{'e': 'text', 't': 'Intermediate Showcase'}], 'subreddit_name_prefixed': 'r/Python', 'hidden': False, 'pwls': 6, 'link_flair_css_class': 'intermediate-showcase', 'downs': 0, 'thumbnail_height': None, 'top_awarded_type': None, 'hide_score': False, 'name': 't3_11d78ek', 'quarantine': False, 'link_flair_text_color': 'light', 'upvote_ratio': 0.61, 'author_flair_background_color': None, 'subreddit_type': 'public', 'ups': 2, 'total_awards_received': 0, 'media_embed': {}, 'thumbnail_width': None, 'author_flair_template_id': None, 'is_original_content': False, 'user_reports': [], 'secure_media': None, 'is_reddit_media_domain': False, 'is_meta': False, 'category': None, 'secure_media_embed': {}, 'link_flair_text': 'Intermediate Showcase', 'can_mod_post': False, 'score': 2, 'approved_by': None, 'is_created_from_ads_ui': False, 'author_premium': False, 'thumbnail': 'self', 'edited': False, 'author_flair_css_class': None, 'author_flair_richtext': [], 'gildings': {}, 'post_hint': 'self', 'content_categories': None, 'is_self': True, 'mod_note': None, 'created': 1677488488.0, 'link_flair_type': 'richtext', 'wls': 6, 'removed_by_category': None, 'banned_by': None, 'author_flair_type': 'text', 'domain': 'self.Python', 'allow_live_comments': False, 'selftext_html': '&lt;!-- SC_OFF --&gt;&lt;div class="md"&gt;&lt;p&gt;Hey everyone!&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;m working on developer-first alerting CLI so every developer will be able to create alerts within their IDE, keep (pun intended) it close to the code, and integrate it with their CI/CD.&lt;/p&gt;\n\n&lt;p&gt;Every insight/interesting use case is welcome (feel free to create an issue in the repository and I&amp;#39;ll get to it asap)&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href="https://github.com/keephq/keep"&gt;https://github.com/keephq/keep&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;', 'likes': None, 'suggested_sort': None, 'banned_at_utc': None, 'view_count': None, 'archived': False, 'no_follow': True, 'is_crosspostable': False, 'pinned': False, 'over_18': False, 'preview': {'images': [{'source': {'url': 'https://external-preview.redd.it/_tDIqCYTSgRQWdLt08-WsOKbGRIs9dtg5XL-QOi1ZK0.jpg?auto=webp&amp;v=enabled&amp;s=c9a76a06ec6a71ca0053377981b76c7955cc79dc', 'width': 1280, 'height': 640}, 'resolutions': [{'url': 'https://external-preview.redd.it/_tDIqCYTSgRQWdLt08-WsOKbGRIs9dtg5XL-QOi1ZK0.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;v=enabled&amp;s=b53b36528b70f3f43a83132441f1e59976f98647', 'width': 108, 'height': 54}, {'url': 'https://external-preview.redd.it/_tDIqCYTSgRQWdLt08-WsOKbGRIs9dtg5XL-QOi1ZK0.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;v=enabled&amp;s=6272fa8533ef376e27aae521548d7d20738fc598', 'width': 216, 'height': 108}, {'url': 'https://external-preview.redd.it/_tDIqCYTSgRQWdLt08-WsOKbGRIs9dtg5XL-QOi1ZK0.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;v=enabled&amp;s=d5a9634327bb20420bc2130cd92af88e13aa6b03', 'width': 320, 'height': 160}, {'url': 'https://external-preview.redd.it/_tDIqCYTSgRQWdLt08-WsOKbGRIs9dtg5XL-QOi1ZK0.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;v=enabled&amp;s=52d77254114adc730fc6d114ca3b8a5ae4d18c80', 'width': 640, 'height': 320}, {'url': 'https://external-preview.redd.it/_tDIqCYTSgRQWdLt08-WsOKbGRIs9dtg5XL-QOi1ZK0.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;v=enabled&amp;s=3c6cf33cdf951ee70edb59397d8a758eadead459', 'width': 960, 'height': 480}, {'url': 'https://external-preview.redd.it/_tDIqCYTSgRQWdLt08-WsOKbGRIs9dtg5XL-QOi1ZK0.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;v=enabled&amp;s=0b0d5d5c10f9c49b6b5835598f43cea584d6ddb9', 'width': 1080, 'height': 540}], 'variants': {}, 'id': '3dopAmpPewz5qupPgJSs_7Enb7d5hktC23Os1ftWGKw'}], 'enabled': False}, 'all_awardings': [], 'awarders': [], 'media_only': False, 'link_flair_template_id': '23ba6f68-cfa2-11ea-96b4-0e31bcb4ff77', 'can_gild': False, 'spoiler': False, 'locked': False, 'author_flair_text': None, 'treatment_tags': [], 'visited': False, 'removed_by': None, 'num_reports': None, 'distinguished': None, 'subreddit_id': 't5_2qh0y', 'author_is_blocked': False, 'mod_reason_by': None, 'removal_reason': None, 'link_flair_background_color': '#ea0027', 'id': '11d78ek', 'is_robot_indexable': True, 'report_reasons': None, 'author': 'SnooComics9516', 'discussion_type': None, 'num_comments': 0, 'send_replies': True, 'whitelist_status': 'all_ads', 'contest_mode': False, 'mod_reports': [], 'author_patreon_flair': False, 'author_flair_text_color': None, 'permalink': '/r/Python/comments/11d78ek/opensource_alerting_cli/', 'parent_whitelist_status': 'all_ads', 'stickied': False, 'url': 'https://www.reddit.com/r/Python/comments/11d78ek/opensource_alerting_cli/', 'subreddit_subscribers': 1106345, 'created_utc': 1677488488.0, 'num_crossposts': 0, 'media': None, 'is_video': False}}, {'kind': 't3', 'data': {'approved_at_utc': None, 'subreddit': 'Python', 'selftext': "I found Devmate, but I'm not sure how good it is. I work in Visual Studio, and writing unit tests is a challenging job. Is there something we can do to make this easier?", 'author_fullname': 't2_os9v1jrb', 'saved': False, 'mod_reason_title': None, 'gilded': 0, 'clicked': False, 'title': 'Is there a way to automate writing unit tests?', 'link_flair_richtext': [{'e': 'text', 't': 'Discussion'}], 'subreddit_name_prefixed': 'r/Python', 'hidden': False, 'pwls': 6, 'link_flair_css_class': 'discussion', 'downs': 0, 'thumbnail_height': None, 'top_awarded_type': None, 'hide_score': False, 'name': 't3_11cgko1', 'quarantine': False, 'link_flair_text_color': 'dark', 'upvote_ratio': 0.85, 'author_flair_background_color': None, 'subreddit_type': 'public', 'ups': 52, 'total_awards_received': 0, 'media_embed': {}, 'thumbnail_width': None, 'author_flair_template_id': None, 'is_original_content': False, 'user_reports': [], 'secure_media': None, 'is_reddit_media_domain': False, 'is_meta': False, 'category': None, 'secure_media_embed': {}, 'link_flair_text': 'Discussion', 'can_mod_post': False, 'score': 52, 'approved_by': None, 'is_created_from_ads_ui': False, 'author_premium': False, 'thumbnail': 'self', 'edited': False, 'author_flair_css_class': None, 'author_flair_richtext': [], 'gildings': {}, 'content_categories': None, 'is_self': True, 'mod_note': None, 'created': 1677416521.0, 'link_flair_type': 'richtext', 'wls': 6, 'removed_by_category': None, 'banned_by': None, 'author_flair_type': 'text', 'domain': 'self.Python', 'allow_live_comments': False, 'selftext_html': '&lt;!-- SC_OFF --&gt;&lt;div class="md"&gt;&lt;p&gt;I found Devmate, but I&amp;#39;m not sure how good it is. I work in Visual Studio, and writing unit tests is a challenging job. Is there something we can do to make this easier?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;', 'likes': None, 'suggested_sort': None, 'banned_at_utc': None, 'view_count': None, 'archived': False, 'no_follow': False, 'is_crosspostable': False, 'pinned': False, 'over_18': False, 'all_awardings': [], 'awarders': [], 'media_only': False, 'link_flair_template_id': '0df42996-1c5e-11ea-b1a0-0e44e1c5b731', 'can_gild': False, 'spoiler': False, 'locked': False, 'author_flair_text': None, 'treatment_tags': [], 'visited': False, 'removed_by': None, 'num_reports': None, 'distinguished': None, 'subreddit_id': 't5_2qh0y', 'author_is_blocked': False, 'mod_reason_by': None, 'removal_reason': None, 'link_flair_background_color': '', 'id': '11cgko1', 'is_robot_indexable': True, 'report_reasons': None, 'author': 'triciniumfa', 'discussion_type': None, 'num_comments': 65, 'send_replies': True, 'whitelist_status': 'all_ads', 'contest_mode': False, 'mod_reports': [], 'author_patreon_flair': False, 'author_flair_text_color': None, 'permalink': '/r/Python/comments/11cgko1/is_there_a_way_to_automate_writing_unit_tests/', 'parent_whitelist_status': 'all_ads', 'stickied': False, 'url': 'https://www.reddit.com/r/Python/comments/11cgko1/is_there_a_way_to_automate_writing_unit_tests/', 'subreddit_subscribers': 1106345, 'created_utc': 1677416521.0, 'num_crossposts': 0, 'media': None, 'is_video': False}}, {'kind': 't3', 'data': {'approved_at_utc': None, 'subreddit': 'Python', 'selftext': "Hello, sorry if this is a redundant subject, but I would like to have your feedback and support. I am 33 years old, working as RF/RAN engineer in Europe. I got a bachelor in 2013 in a mix of computer science and electrical engineering. I would like to make a career change to a SW development . \n\nI have been avoiding sw develeopment and coding since school, even at work i had some opportunities to automate stuff but no. Now I can't run anymore I should learn how to code /build products. From my understanding, python is the answer for me. As we are manipulating a lot of data in my current work, i can start learning python in parallel to my current work and apply some of it to my current work. Afterword, i would like to make a complete carrier change.. but to what i dont really now for now ( data science web or other thing, your suggestions are welcome.) \nSo \n- what is the best approach to a carrier change( i cant quit my current job now)\n - should I learn the basics then go to details or start learning details from the beginning\n - what are the best materials/courses to master python\n\nThanks", 'author_fullname': 't2_ntreollu', 'saved': False, 'mod_reason_title': None, 'gilded': 0, 'clicked': False, 'title': 'Best python course for a carrier change.', 'link_flair_richtext': [{'e': 'text', 't': 'Discussion'}], 'subreddit_name_prefixed': 'r/Python', 'hidden': False, 'pwls': 6, 'link_flair_css_class': 'discussion', 'downs': 0, 'thumbnail_height': None, 'top_awarded_type': None, 'hide_score': False, 'name': 't3_11d8svq', 'quarantine': False, 'link_flair_text_color': 'dark', 'upvote_ratio': 0.67, 'author_flair_background_color': None, 'subreddit_type': 'public', 'ups': 1, 'total_awards_received': 0, 'media_embed': {}, 'thumbnail_width': None, 'author_flair_template_id': None, 'is_original_content': False, 'user_reports': [], 'secure_media': None, 'is_reddit_media_domain': False, 'is_meta': False, 'category': None, 'secure_media_embed': {}, 'link_flair_text': 'Discussion', 'can_mod_post': False, 'score': 1, 'approved_by': None, 'is_created_from_ads_ui': False, 'author_premium': False, 'thumbnail': 'self', 'edited': False, 'author_flair_css_class': None, 'author_flair_richtext': [], 'gildings': {}, 'content_categories': None, 'is_self': True, 'mod_note': None, 'created': 1677494375.0, 'link_flair_type': 'richtext', 'wls': 6, 'removed_by_category': None, 'banned_by': None, 'author_flair_type': 'text', 'domain': 'self.Python', 'allow_live_comments': False, 'selftext_html': '&lt;!-- SC_OFF --&gt;&lt;div class="md"&gt;&lt;p&gt;Hello, sorry if this is a redundant subject, but I would like to have your feedback and support. I am 33 years old, working as RF/RAN engineer in Europe. I got a bachelor in 2013 in a mix of computer science and electrical engineering. I would like to make a career change to a SW development . &lt;/p&gt;\n\n&lt;p&gt;I have been avoiding sw develeopment and coding since school, even at work i had some opportunities to automate stuff but no. Now I can&amp;#39;t run anymore I should learn how to code /build products. From my understanding, python is the answer for me. As we are manipulating a lot of data in my current work, i can start learning python in parallel to my current work and apply some of it to my current work. Afterword, i would like to make a complete carrier change.. but to what i dont really now for now ( data science web or other thing, your suggestions are welcome.) \nSo \n- what is the best approach to a carrier change( i cant quit my current job now)\n - should I learn the basics then go to details or start learning details from the beginning\n - what are the best materials/courses to master python&lt;/p&gt;\n\n&lt;p&gt;Thanks&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;', 'likes': None, 'suggested_sort': None, 'banned_at_utc': None, 'view_count': None, 'archived': False, 'no_follow': True, 'is_crosspostable': False, 'pinned': False, 'over_18': False, 'all_awardings': [], 'awarders': [], 'media_only': False, 'link_flair_template_id': '0df42996-1c5e-11ea-b1a0-0e44e1c5b731', 'can_gild': False, 'spoiler': False, 'locked': False, 'author_flair_text': None, 'treatment_tags': [], 'visited': False, 'removed_by': None, 'num_reports': None, 'distinguished': None, 'subreddit_id': 't5_2qh0y', 'author_is_blocked': False, 'mod_reason_by': None, 'removal_reason': None, 'link_flair_background_color': '', 'id': '11d8svq', 'is_robot_indexable': True, 'report_reasons': None, 'author': 'skullme125', 'discussion_type': None, 'num_comments': 4, 'send_replies': True, 'whitelist_status': 'all_ads', 'contest_mode': False, 'mod_reports': [], 'author_patreon_flair': False, 'author_flair_text_color': None, 'permalink': '/r/Python/comments/11d8svq/best_python_course_for_a_carrier_change/', 'parent_whitelist_status': 'all_ads', 'stickied': False, 'url': 'https://www.reddit.com/r/Python/comments/11d8svq/best_python_course_for_a_carrier_change/', 'subreddit_subscribers': 1106345, 'created_utc': 1677494375.0, 'num_crossposts': 0, 'media': None, 'is_video': False}}, {'kind': 't3', 'data': {'approved_at_utc': None, 'subreddit': 'Python', 'selftext': '', 'author_fullname': 't2_fvwnhjy5', 'saved': False, 'mod_reason_title': None, 'gilded': 0, 'clicked': False, 'title': 'Pydantic Introduction - Models, Fields, Constrained Types, Validator Functions and Model Exports', 'link_flair_richtext': [{'e': 'text', 't': 'Tutorial'}], 'subreddit_name_prefixed': 'r/Python', 'hidden': False, 'pwls': 6, 'link_flair_css_class': 'tutorial', 'downs': 0, 'thumbnail_height': 105, 'top_awarded_type': None, 'hide_score': False, 'name': 't3_11dc0hd', 'quarantine': False, 'link_flair_text_color': 'dark', 'upvote_ratio': 0.38, 'author_flair_background_color': None, 'ups': 0, 'total_awards_received': 0, 'media_embed': {'content': '&lt;iframe width="356" height="200" src="https://www.youtube.com/embed/i4jespFbA1c?feature=oembed&amp;enablejsapi=1" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen title="Pydantic Introduction - Models, Fields, Constrained Types, Validator Functions and Model Exports"&gt;&lt;/iframe&gt;', 'width': 356, 'scrolling': False, 'height': 200}, 'thumbnail_width': 140, 'author_flair_template_id': None, 'is_original_content': False, 'user_reports': [], 'secure_media': {'type': 'youtube.com', 'oembed': {'provider_url': 'https://www.youtube.com/', 'version': '1.0', 'title': 'Pydantic Introduction - Models, Fields, Constrained Types, Validator Functions and Model Exports', 'type': 'video', 'thumbnail_width': 480, 'height': 200, 'width': 356, 'html': '&lt;iframe width="356" height="200" src="https://www.youtube.com/embed/i4jespFbA1c?feature=oembed&amp;enablejsapi=1" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen title="Pydantic Introduction - Models, Fields, Constrained Types, Validator Functions and Model Exports"&gt;&lt;/iframe&gt;', 'author_name': 'BugBytes', 'provider_name': 'YouTube', 'thumbnail_url': 'https://i.ytimg.com/vi/i4jespFbA1c/hqdefault.jpg', 'thumbnail_height': 360, 'author_url': 'https://www.youtube.com/@bugbytes3923'}}, 'is_reddit_media_domain': False, 'is_meta': False, 'category': None, 'secure_media_embed': {'content': '&lt;iframe width="356" height="200" src="https://www.youtube.com/embed/i4jespFbA1c?feature=oembed&amp;enablejsapi=1" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen title="Pydantic Introduction - Models, Fields, Constrained Types, Validator Functions and Model Exports"&gt;&lt;/iframe&gt;', 'width': 356, 'scrolling': False, 'media_domain_url': 'https://www.redditmedia.com/mediaembed/11dc0hd', 'height': 200}, 'link_flair_text': 'Tutorial', 'can_mod_post': False, 'score': 0, 'approved_by': None, 'is_created_from_ads_ui': False, 'author_premium': False, 'thumbnail': 'https://b.thumbs.redditmedia.com/fD26nfA339Yib1H-LroKhX9G7FnMha8RHp_yXK94IEw.jpg', 'edited': False, 'author_flair_css_class': None, 'author_flair_richtext': [], 'gildings': {}, 'post_hint': 'rich:video', 'content_categories': None, 'is_self': False, 'subreddit_type': 'public', 'created': 1677504987.0, 'link_flair_type': 'richtext', 'wls': 6, 'removed_by_category': None, 'banned_by': None, 'author_flair_type': 'text', 'domain': 'youtube.com', 'allow_live_comments': False, 'selftext_html': None, 'likes': None, 'suggested_sort': None, 'banned_at_utc': None, 'url_overridden_by_dest': 'https://www.youtube.com/watch?v=i4jespFbA1c', 'view_count': None, 'archived': False, 'no_follow': True, 'is_crosspostable': False, 'pinned': False, 'over_18': False, 'preview': {'images': [{'source': {'url': 'https://external-preview.redd.it/RwPRUd_-id3kcOchMRtix-OnBUnPCEwmsNrZ0D6B8XE.jpg?auto=webp&amp;v=enabled&amp;s=995b6bfdbd8e6ea6cfd8fb43cf5c03fdd58725c6', 'width': 480, 'height': 360}, 'resolutions': [{'url': 'https://external-preview.redd.it/RwPRUd_-id3kcOchMRtix-OnBUnPCEwmsNrZ0D6B8XE.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;v=enabled&amp;s=dda6150669ffe475313d2e59fc278161e4ab4aba', 'width': 108, 'height': 81}, {'url': 'https://external-preview.redd.it/RwPRUd_-id3kcOchMRtix-OnBUnPCEwmsNrZ0D6B8XE.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;v=enabled&amp;s=7901487db59758b3a9c7896df46c9657ef1ee499', 'width': 216, 'height': 162}, {'url': 'https://external-preview.redd.it/RwPRUd_-id3kcOchMRtix-OnBUnPCEwmsNrZ0D6B8XE.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;v=enabled&amp;s=4627c048748e55bcc82e49f3f2b285305f3224bc', 'width': 320, 'height': 240}], 'variants': {}, 'id': '2YXlllbxsnvqJeXDNWGM2-f_tueLoire2_PEMn4UGPk'}], 'enabled': False}, 'all_awardings': [], 'awarders': [], 'media_only': False, 'link_flair_template_id': '7987a74c-04d8-11eb-84ca-0e0ac8b5a78f', 'can_gild': False, 'spoiler': False, 'locked': False, 'author_flair_text': None, 'treatment_tags': [], 'visited': False, 'removed_by': None, 'mod_note': None, 'distinguished': None, 'subreddit_id': 't5_2qh0y', 'author_is_blocked': False, 'mod_reason_by': None, 'num_reports': None, 'removal_reason': None, 'link_flair_background_color': '#dadada', 'id': '11dc0hd', 'is_robot_indexable': True, 'report_reasons': None, 'author': 'ok-requirement-9559', 'discussion_type': None, 'num_comments': 0, 'send_replies': True, 'whitelist_status': 'all_ads', 'contest_mode': False, 'mod_reports': [], 'author_patreon_flair': False, 'author_flair_text_color': None, 'permalink': '/r/Python/comments/11dc0hd/pydantic_introduction_models_fields_constrained/', 'parent_whitelist_status': 'all_ads', 'stickied': False, 'url': 'https://www.youtube.com/watch?v=i4jespFbA1c', 'subreddit_subscribers': 1106345, 'created_utc': 1677504987.0, 'num_crossposts': 0, 'media': {'type': 'youtube.com', 'oembed': {'provider_url': 'https://www.youtube.com/', 'version': '1.0', 'title': 'Pydantic Introduction - Models, Fields, Constrained Types, Validator Functions and Model Exports', 'type': 'video', 'thumbnail_width': 480, 'height': 200, 'width': 356, 'html': '&lt;iframe width="356" height="200" src="https://www.youtube.com/embed/i4jespFbA1c?feature=oembed&amp;enablejsapi=1" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen title="Pydantic Introduction - Models, Fields, Constrained Types, Validator Functions and Model Exports"&gt;&lt;/iframe&gt;', 'author_name': 'BugBytes', 'provider_name': 'YouTube', 'thumbnail_url': 'https://i.ytimg.com/vi/i4jespFbA1c/hqdefault.jpg', 'thumbnail_height': 360, 'author_url': 'https://www.youtube.com/@bugbytes3923'}}, 'is_video': False}}, {'kind': 't3', 'data': {'approved_at_utc': None, 'subreddit': 'Python', 'selftext': 'I was looking for a way to  have an enumeration-like type using Python\'s built-in tools without resorting to third-party libraries for the sake of portability, so  I thought sharing it with you guys won\'t harm. It\'s very short:\n\n```\nfrom typing import Type, Any #you can just remove this and the annotation for maximum portability\n\ndef enumclass(passed_class: Type[Any]):\n    def enum_init(passed_class):\n        properties = list(vars(passed_class))\n        \n        for p in properties:\n            if not p.startswith("__"):\n                passed_class.p = repr(p)\n\n    passed_class.__init__ = enum_init\n    passed_class.__init__(passed_class)\n\n    return passed_class\n```\n\nWhat it does is, when used as a decorator, it sets the function `enum_init` as the init function of your class, then gets all the properties of the class using `vars` --- mind that `vars` returns a generator so we must spend it using `list` since it\'s actively writing to class and as it goes on, depending on what implementation of Python you use (I use CPython) the underlying pointer changes when the class changes. So you must save the data from the original class in the syntax tree, not the class that is being actively changed in the tree. I hope that makes sense. We set the property variable `p` to `repr(p)`. We have basically taken the value of `p` out of syntax tree and upon calling the function, this will be evaluated.\n\nAnyways we make sure the property name does not contain `__` which denotes Pythons built-in class properties. We then set that function as the class init and initialize.\n\nSo when we do something like this:\n\n```\n@enumclass\nclass AA:\n    ss: str = \'sa\'\n    mm: str = \'mm\'\n    aa: int = 1\n\n\nprint(AA.aa, AA.mm, AA.ss)\n```\n\nIt will print:\n```\n1 mm sa\n```\n\nWhy is that? Because the class is no longer a class in the syntax tree, rather, an evaluated variable which whose properties we set. This is the main difference between Python\'s decorators and macros in static languages. Python\'s decorators can be very powerful but they don\'t change the syntax tree in a way we want, rather, they change the value of the class or the function they are decorating in memory.\n\nThis perhaps would have been doable in a more elegant way using class inheritance. Not sure. I like this solution and it serves my purpose.\n\nI hope this thread is not against the rules. I did not see anything regarding such posts in there.\n\nEnjoy and keep safe.', 'author_fullname': 't2_s550414g', 'saved': False, 'mod_reason_title': None, 'gilded': 0, 'clicked': False, 'title': 'I wrote an enumclass decorator you may find useful... It turns your class type into an enumeration type', 'link_flair_richtext': [{'e': 'text', 't': 'Tutorial'}], 'subreddit_name_prefixed': 'r/Python', 'hidden': False, 'pwls': 6, 'link_flair_css_class': 'tutorial', 'downs': 0, 'thumbnail_height': None, 'top_awarded_type': None, 'hide_score': False, 'name': 't3_11d7mxr', 'quarantine': False, 'link_flair_text_color': 'dark', 'upvote_ratio': 0.55, 'author_flair_background_color': None, 'subreddit_type': 'public', 'ups': 1, 'total_awards_received': 0, 'media_embed': {}, 'thumbnail_width': None, 'author_flair_template_id': None, 'is_original_content': False, 'user_reports': [], 'secure_media': None, 'is_reddit_media_domain': False, 'is_meta': False, 'category': None, 'secure_media_embed': {}, 'link_flair_text': 'Tutorial', 'can_mod_post': False, 'score': 1, 'approved_by': None, 'is_created_from_ads_ui': False, 'author_premium': False, 'thumbnail': 'self', 'edited': False, 'author_flair_css_class': None, 'author_flair_richtext': [], 'gildings': {}, 'content_categories': None, 'is_self': True, 'mod_note': None, 'created': 1677490027.0, 'link_flair_type': 'richtext', 'wls': 6, 'removed_by_category': None, 'banned_by': None, 'author_flair_type': 'text', 'domain': 'self.Python', 'allow_live_comments': False, 'selftext_html': '&lt;!-- SC_OFF --&gt;&lt;div class="md"&gt;&lt;p&gt;I was looking for a way to  have an enumeration-like type using Python&amp;#39;s built-in tools without resorting to third-party libraries for the sake of portability, so  I thought sharing it with you guys won&amp;#39;t harm. It&amp;#39;s very short:&lt;/p&gt;\n\n&lt;p&gt;```\nfrom typing import Type, Any #you can just remove this and the annotation for maximum portability&lt;/p&gt;\n\n&lt;p&gt;def enumclass(passed_class: Type[Any]):\n    def enum_init(passed_class):\n        properties = list(vars(passed_class))&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;    for p in properties:\n        if not p.startswith(&amp;quot;__&amp;quot;):\n            passed_class.p = repr(p)\n\npassed_class.__init__ = enum_init\npassed_class.__init__(passed_class)\n\nreturn passed_class\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;```&lt;/p&gt;\n\n&lt;p&gt;What it does is, when used as a decorator, it sets the function &lt;code&gt;enum_init&lt;/code&gt; as the init function of your class, then gets all the properties of the class using &lt;code&gt;vars&lt;/code&gt; --- mind that &lt;code&gt;vars&lt;/code&gt; returns a generator so we must spend it using &lt;code&gt;list&lt;/code&gt; since it&amp;#39;s actively writing to class and as it goes on, depending on what implementation of Python you use (I use CPython) the underlying pointer changes when the class changes. So you must save the data from the original class in the syntax tree, not the class that is being actively changed in the tree. I hope that makes sense. We set the property variable &lt;code&gt;p&lt;/code&gt; to &lt;code&gt;repr(p)&lt;/code&gt;. We have basically taken the value of &lt;code&gt;p&lt;/code&gt; out of syntax tree and upon calling the function, this will be evaluated.&lt;/p&gt;\n\n&lt;p&gt;Anyways we make sure the property name does not contain &lt;code&gt;__&lt;/code&gt; which denotes Pythons built-in class properties. We then set that function as the class init and initialize.&lt;/p&gt;\n\n&lt;p&gt;So when we do something like this:&lt;/p&gt;\n\n&lt;p&gt;```\n@enumclass\nclass AA:\n    ss: str = &amp;#39;sa&amp;#39;\n    mm: str = &amp;#39;mm&amp;#39;\n    aa: int = 1&lt;/p&gt;\n\n&lt;p&gt;print(AA.aa, AA.mm, AA.ss)\n```&lt;/p&gt;\n\n&lt;p&gt;It will print:\n&lt;code&gt;\n1 mm sa\n&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;Why is that? Because the class is no longer a class in the syntax tree, rather, an evaluated variable which whose properties we set. This is the main difference between Python&amp;#39;s decorators and macros in static languages. Python&amp;#39;s decorators can be very powerful but they don&amp;#39;t change the syntax tree in a way we want, rather, they change the value of the class or the function they are decorating in memory.&lt;/p&gt;\n\n&lt;p&gt;This perhaps would have been doable in a more elegant way using class inheritance. Not sure. I like this solution and it serves my purpose.&lt;/p&gt;\n\n&lt;p&gt;I hope this thread is not against the rules. I did not see anything regarding such posts in there.&lt;/p&gt;\n\n&lt;p&gt;Enjoy and keep safe.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;', 'likes': None, 'suggested_sort': None, 'banned_at_utc': None, 'view_count': None, 'archived': False, 'no_follow': True, 'is_crosspostable': False, 'pinned': False, 'over_18': False, 'all_awardings': [], 'awarders': [], 'media_only': False, 'link_flair_template_id': '7987a74c-04d8-11eb-84ca-0e0ac8b5a78f', 'can_gild': False, 'spoiler': False, 'locked': False, 'author_flair_text': None, 'treatment_tags': [], 'visited': False, 'removed_by': None, 'num_reports': None, 'distinguished': None, 'subreddit_id': 't5_2qh0y', 'author_is_blocked': False, 'mod_reason_by': None, 'removal_reason': None, 'link_flair_background_color': '#dadada', 'id': '11d7mxr', 'is_robot_indexable': True, 'report_reasons': None, 'author': 'GeorgeneKeck', 'discussion_type': None, 'num_comments': 3, 'send_replies': True, 'whitelist_status': 'all_ads', 'contest_mode': False, 'mod_reports': [], 'author_patreon_flair': False, 'author_flair_text_color': None, 'permalink': '/r/Python/comments/11d7mxr/i_wrote_an_enumclass_decorator_you_may_find/', 'parent_whitelist_status': 'all_ads', 'stickied': False, 'url': 'https://www.reddit.com/r/Python/comments/11d7mxr/i_wrote_an_enumclass_decorator_you_may_find/', 'subreddit_subscribers': 1106345, 'created_utc': 1677490027.0, 'num_crossposts': 0, 'media': None, 'is_video': False}}, {'kind': 't3', 'data': {'approved_at_utc': None, 'subreddit': 'Python', 'selftext': 'Hi - Im looking for some tips on how to write some code.\n\nI have only recently started to learn Python, which is my first coding language.\n\nI have set my self a task to create a simple subtraction tool that outputs the result and captures it in a table.\n\nWhat i would like to do is learn how to take the result of this tool and list it in a simple table (Column 1: Line 1,2,3,4,5 etc.., Column 2: Result (The outputted data))\n\nMy code so far (Ignore spaces between lines, could format correctly on Reddit!)\n\nfirst = float(input("First Value: "))\n\nsecond = float(input("Second Value: "))\n\nsum = first - second\n\nprint("Total Value: " + str(sum))\n\n\n\nWhat I want it to look like\n\nLine\t\t\tResult\n1.\t\t\t\t500.353\n2.\t\t\t\t23505.503\t\t\t\t\n3.\t\t\t\t30.353\n4.\t\t\t\t305.252\n5.\t\t\t\t402.242', 'author_fullname': 't2_10tcoe', 'saved': False, 'mod_reason_title': None, 'gilded': 0, 'clicked': False, 'title': 'First Project: Create table from subtraction tool', 'link_flair_richtext': [{'e': 'text', 't': 'Beginner Showcase'}], 'subreddit_name_prefixed': 'r/Python', 'hidden': False, 'pwls': 6, 'link_flair_css_class': 'beginner-showcase', 'downs': 0, 'thumbnail_height': None, 'top_awarded_type': None, 'hide_score': False, 'name': 't3_11d9ucc', 'quarantine': False, 'link_flair_text_color': 'light', 'upvote_ratio': 0.25, 'author_flair_background_color': None, 'subreddit_type': 'public', 'ups': 0, 'total_awards_received': 0, 'media_embed': {}, 'thumbnail_width': None, 'author_flair_template_id': None, 'is_original_content': False, 'user_reports': [], 'secure_media': None, 'is_reddit_media_domain': False, 'is_meta': False, 'category': None, 'secure_media_embed': {}, 'link_flair_text': 'Beginner Showcase', 'can_mod_post': False, 'score': 0, 'approved_by': None, 'is_created_from_ads_ui': False, 'author_premium': False, 'thumbnail': 'self', 'edited': 1677500990.0, 'author_flair_css_class': None, 'author_flair_richtext': [], 'gildings': {}, 'content_categories': None, 'is_self': True, 'mod_note': None, 'created': 1677498089.0, 'link_flair_type': 'richtext', 'wls': 6, 'removed_by_category': None, 'banned_by': None, 'author_flair_type': 'text', 'domain': 'self.Python', 'allow_live_comments': False, 'selftext_html': '&lt;!-- SC_OFF --&gt;&lt;div class="md"&gt;&lt;p&gt;Hi - Im looking for some tips on how to write some code.&lt;/p&gt;\n\n&lt;p&gt;I have only recently started to learn Python, which is my first coding language.&lt;/p&gt;\n\n&lt;p&gt;I have set my self a task to create a simple subtraction tool that outputs the result and captures it in a table.&lt;/p&gt;\n\n&lt;p&gt;What i would like to do is learn how to take the result of this tool and list it in a simple table (Column 1: Line 1,2,3,4,5 etc.., Column 2: Result (The outputted data))&lt;/p&gt;\n\n&lt;p&gt;My code so far (Ignore spaces between lines, could format correctly on Reddit!)&lt;/p&gt;\n\n&lt;p&gt;first = float(input(&amp;quot;First Value: &amp;quot;))&lt;/p&gt;\n\n&lt;p&gt;second = float(input(&amp;quot;Second Value: &amp;quot;))&lt;/p&gt;\n\n&lt;p&gt;sum = first - second&lt;/p&gt;\n\n&lt;p&gt;print(&amp;quot;Total Value: &amp;quot; + str(sum))&lt;/p&gt;\n\n&lt;p&gt;What I want it to look like&lt;/p&gt;\n\n&lt;p&gt;Line            Result\n1.              500.353\n2.              23505.503&lt;br/&gt;\n3.              30.353\n4.              305.252\n5.              402.242&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;', 'likes': None, 'suggested_sort': None, 'banned_at_utc': None, 'view_count': None, 'archived': False, 'no_follow': True, 'is_crosspostable': False, 'pinned': False, 'over_18': False, 'all_awardings': [], 'awarders': [], 'media_only': False, 'link_flair_template_id': '1678450a-cfa2-11ea-830c-0e5035839c63', 'can_gild': False, 'spoiler': False, 'locked': False, 'author_flair_text': None, 'treatment_tags': [], 'visited': False, 'removed_by': None, 'num_reports': None, 'distinguished': None, 'subreddit_id': 't5_2qh0y', 'author_is_blocked': False, 'mod_reason_by': None, 'removal_reason': None, 'link_flair_background_color': '#73ad34', 'id': '11d9ucc', 'is_robot_indexable': True, 'report_reasons': None, 'author': 'lewishoodmusic', 'discussion_type': None, 'num_comments': 1, 'send_replies': True, 'whitelist_status': 'all_ads', 'contest_mode': False, 'mod_reports': [], 'author_patreon_flair': False, 'author_flair_text_color': None, 'permalink': '/r/Python/comments/11d9ucc/first_project_create_table_from_subtraction_tool/', 'parent_whitelist_status': 'all_ads', 'stickied': False, 'url': 'https://www.reddit.com/r/Python/comments/11d9ucc/first_project_create_table_from_subtraction_tool/', 'subreddit_subscribers': 1106345, 'created_utc': 1677498089.0, 'num_crossposts': 0, 'media': None, 'is_video': False}}, {'kind': 't3', 'data': {'approved_at_utc': None, 'subreddit': 'Python', 'selftext': ' I share my experience building a fully event-driven service using Knative and KafkaChannel-based resources with SinkBinding: https://rogulski.it/blog/knative-channel-subscription-with-sink-binding/', 'author_fullname': 't2_xiy4s', 'saved': False, 'mod_reason_title': None, 'gilded': 0, 'clicked': False, 'title': 'Streamlining Event-Driven Architecture with Knative Channels and SinkBinding', 'link_flair_richtext': [{'e': 'text', 't': 'Intermediate Showcase'}], 'subreddit_name_prefixed': 'r/Python', 'hidden': False, 'pwls': 6, 'link_flair_css_class': 'intermediate-showcase', 'downs': 0, 'thumbnail_height': None, 'top_awarded_type': None, 'hide_score': False, 'name': 't3_11d5ue7', 'quarantine': False, 'link_flair_text_color': 'light', 'upvote_ratio': 0.57, 'author_flair_background_color': None, 'subreddit_type': 'public', 'ups': 1, 'total_awards_received': 0, 'media_embed': {}, 'thumbnail_width': None, 'author_flair_template_id': None, 'is_original_content': False, 'user_reports': [], 'secure_media': None, 'is_reddit_media_domain': False, 'is_meta': False, 'category': None, 'secure_media_embed': {}, 'link_flair_text': 'Intermediate Showcase', 'can_mod_post': False, 'score': 1, 'approved_by': None, 'is_created_from_ads_ui': False, 'author_premium': False, 'thumbnail': 'self', 'edited': False, 'author_flair_css_class': None, 'author_flair_richtext': [], 'gildings': {}, 'post_hint': 'self', 'content_categories': None, 'is_self': True, 'mod_note': None, 'created': 1677483160.0, 'link_flair_type': 'richtext', 'wls': 6, 'removed_by_category': None, 'banned_by': None, 'author_flair_type': 'text', 'domain': 'self.Python', 'allow_live_comments': False, 'selftext_html': '&lt;!-- SC_OFF --&gt;&lt;div class="md"&gt;&lt;p&gt;I share my experience building a fully event-driven service using Knative and KafkaChannel-based resources with SinkBinding: &lt;a href="https://rogulski.it/blog/knative-channel-subscription-with-sink-binding/"&gt;https://rogulski.it/blog/knative-channel-subscription-with-sink-binding/&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;', 'likes': None, 'suggested_sort': None, 'banned_at_utc': None, 'view_count': None, 'archived': False, 'no_follow': True, 'is_crosspostable': False, 'pinned': False, 'over_18': False, 'preview': {'images': [{'source': {'url': 'https://external-preview.redd.it/6L1ywf2ZDsBmxZdUGEl1a-y-FSs9OEhWwhJkgYOVGW8.jpg?auto=webp&amp;v=enabled&amp;s=aedc78e3a42ef649738c2aaae905caf7242a6647', 'width': 1200, 'height': 630}, 'resolutions': [{'url': 'https://external-preview.redd.it/6L1ywf2ZDsBmxZdUGEl1a-y-FSs9OEhWwhJkgYOVGW8.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;v=enabled&amp;s=9c7cb96a2f4799d71192a6baf5e529fb76273317', 'width': 108, 'height': 56}, {'url': 'https://external-preview.redd.it/6L1ywf2ZDsBmxZdUGEl1a-y-FSs9OEhWwhJkgYOVGW8.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;v=enabled&amp;s=c8e2471319306df71f9110caf668e959debe9699', 'width': 216, 'height': 113}, {'url': 'https://external-preview.redd.it/6L1ywf2ZDsBmxZdUGEl1a-y-FSs9OEhWwhJkgYOVGW8.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;v=enabled&amp;s=a36fda0941012f85f32665b45bf4916142c52ea8', 'width': 320, 'height': 168}, {'url': 'https://external-preview.redd.it/6L1ywf2ZDsBmxZdUGEl1a-y-FSs9OEhWwhJkgYOVGW8.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;v=enabled&amp;s=dc9a9f81ac31dad3f6b9d3264ae03bd60e7d0ff8', 'width': 640, 'height': 336}, {'url': 'https://external-preview.redd.it/6L1ywf2ZDsBmxZdUGEl1a-y-FSs9OEhWwhJkgYOVGW8.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;v=enabled&amp;s=cf3da302a0c7b81aa8e9a9f395f8725e5f42632c', 'width': 960, 'height': 504}, {'url': 'https://external-preview.redd.it/6L1ywf2ZDsBmxZdUGEl1a-y-FSs9OEhWwhJkgYOVGW8.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;v=enabled&amp;s=255d81c2699c42c021caff5f7cbe2e1701f8583d', 'width': 1080, 'height': 567}], 'variants': {}, 'id': 'wtuuqRI7URdaWgNAO3Vzh4EixxOxqTNTC5iYMuxU9Jw'}], 'enabled': False}, 'all_awardings': [], 'awarders': [], 'media_only': False, 'link_flair_template_id': '23ba6f68-cfa2-11ea-96b4-0e31bcb4ff77', 'can_gild': False, 'spoiler': False, 'locked': False, 'author_flair_text': None, 'treatment_tags': [], 'visited': False, 'removed_by': None, 'num_reports': None, 'distinguished': None, 'subreddit_id': 't5_2qh0y', 'author_is_blocked': False, 'mod_reason_by': None, 'removal_reason': None, 'link_flair_background_color': '#ea0027', 'id': '11d5ue7', 'is_robot_indexable': True, 'report_reasons': None, 'author': 'rivinek', 'discussion_type': None, 'num_comments': 0, 'send_replies': True, 'whitelist_status': 'all_ads', 'contest_mode': False, 'mod_reports': [], 'author_patreon_flair': False, 'author_flair_text_color': None, 'permalink': '/r/Python/comments/11d5ue7/streamlining_eventdriven_architecture_with/', 'parent_whitelist_status': 'all_ads', 'stickied': False, 'url': 'https://www.reddit.com/r/Python/comments/11d5ue7/streamlining_eventdriven_architecture_with/', 'subreddit_subscribers': 1106345, 'created_utc': 1677483160.0, 'num_crossposts': 0, 'media': None, 'is_video': False}}, {'kind': 't3', 'data': {'approved_at_utc': None, 'subreddit': 'Python', 'selftext': '', 'author_fullname': 't2_27zm0l8g', 'saved': False, 'mod_reason_title': None, 'gilded': 0, 'clicked': False, 'title': "Python is two languages now, and that's actually great", 'link_flair_richtext': [{'e': 'text', 't': 'Resource'}], 'subreddit_name_prefixed': 'r/Python', 'hidden': False, 'pwls': 6, 'link_flair_css_class': 'resource', 'downs': 0, 'thumbnail_height': None, 'top_awarded_type': None, 'hide_score': False, 'name': 't3_11dc82i', 'quarantine': False, 'link_flair_text_color': 'dark', 'upvote_ratio': 0.25, 'author_flair_background_color': None, 'subreddit_type': 'public', 'ups': 0, 'total_awards_received': 0, 'media_embed': {}, 'thumbnail_width': None, 'author_flair_template_id': None, 'is_original_content': False, 'user_reports': [], 'secure_media': None, 'is_reddit_media_domain': False, 'is_meta': False, 'category': None, 'secure_media_embed': {}, 'link_flair_text': 'Resource', 'can_mod_post': False, 'score': 0, 'approved_by': None, 'is_created_from_ads_ui': False, 'author_premium': False, 'thumbnail': 'default', 'edited': False, 'author_flair_css_class': None, 'author_flair_richtext': [], 'gildings': {}, 'content_categories': None, 'is_self': False, 'mod_note': None, 'created': 1677505589.0, 'link_flair_type': 'richtext', 'wls': 6, 'removed_by_category': None, 'banned_by': None, 'author_flair_type': 'text', 'domain': 'threeofwands.com', 'allow_live_comments': False, 'selftext_html': None, 'likes': None, 'suggested_sort': None, 'banned_at_utc': None, 'url_overridden_by_dest': 'https://threeofwands.com/python-is-two-languages-now-and-thats-actually-great/', 'view_count': None, 'archived': False, 'no_follow': True, 'is_crosspostable': False, 'pinned': False, 'over_18': False, 'all_awardings': [], 'awarders': [], 'media_only': False, 'link_flair_template_id': 'f9716fb2-4113-11ea-a3f1-0ef51f60f757', 'can_gild': False, 'spoiler': False, 'locked': False, 'author_flair_text': None, 'treatment_tags': [], 'visited': False, 'removed_by': None, 'num_reports': None, 'distinguished': None, 'subreddit_id': 't5_2qh0y', 'author_is_blocked': False, 'mod_reason_by': None, 'removal_reason': None, 'link_flair_background_color': '', 'id': '11dc82i', 'is_robot_indexable': True, 'report_reasons': None, 'author': 'genericlemon24', 'discussion_type': None, 'num_comments': 1, 'send_replies': True, 'whitelist_status': 'all_ads', 'contest_mode': False, 'mod_reports': [], 'author_patreon_flair': False, 'author_flair_text_color': None, 'permalink': '/r/Python/comments/11dc82i/python_is_two_languages_now_and_thats_actually/', 'parent_whitelist_status': 'all_ads', 'stickied': False, 'url': 'https://threeofwands.com/python-is-two-languages-now-and-thats-actually-great/', 'subreddit_subscribers': 1106345, 'created_utc': 1677505589.0, 'num_crossposts': 0, 'media': None, 'is_video': False}}, {'kind': 't3', 'data': {'approved_at_utc': None, 'subreddit': 'Python', 'selftext': 'Hi!\n\nSome days ago, I made a simple CLI that lets you scrape a site, using CSS selectors. It accepts an optional Python oneliner to process data and the \\`requests.request\\` parameters\n\nHere\'s the URL: [https://github.com/ZSendokame/CScrape](https://github.com/ZSendokame/CScrape)\n\nIt can be used like this:\n\n    python -m cscrape \n        --url "website"  # URL to scrape\n        --select "a"  # CSS Selector to use\n        --oneliner "\'\\n\'.join([tag.text for tag in nodes])"  # Optional oneliner\n\nIf you have any idea, please share it to improve the CLI!', 'author_fullname': 't2_jsy4i9d7', 'saved': False, 'mod_reason_title': None, 'gilded': 0, 'clicked': False, 'title': 'Web scraping from the terminal', 'link_flair_richtext': [{'e': 'text', 't': 'Beginner Showcase'}], 'subreddit_name_prefixed': 'r/Python', 'hidden': False, 'pwls': 6, 'link_flair_css_class': 'beginner-showcase', 'downs': 0, 'thumbnail_height': None, 'top_awarded_type': None, 'hide_score': False, 'name': 't3_11crk7n', 'quarantine': False, 'link_flair_text_color': 'light', 'upvote_ratio': 0.72, 'author_flair_background_color': None, 'subreddit_type': 'public', 'ups': 7, 'total_awards_received': 0, 'media_embed': {}, 'thumbnail_width': None, 'author_flair_template_id': None, 'is_original_content': False, 'user_reports': [], 'secure_media': None, 'is_reddit_media_domain': False, 'is_meta': False, 'category': None, 'secure_media_embed': {}, 'link_flair_text': 'Beginner Showcase', 'can_mod_post': False, 'score': 7, 'approved_by': None, 'is_created_from_ads_ui': False, 'author_premium': False, 'thumbnail': 'self', 'edited': False, 'author_flair_css_class': None, 'author_flair_richtext': [], 'gildings': {}, 'post_hint': 'self', 'content_categories': None, 'is_self': True, 'mod_note': None, 'created': 1677442958.0, 'link_flair_type': 'richtext', 'wls': 6, 'removed_by_category': None, 'banned_by': None, 'author_flair_type': 'text', 'domain': 'self.Python', 'allow_live_comments': False, 'selftext_html': '&lt;!-- SC_OFF --&gt;&lt;div class="md"&gt;&lt;p&gt;Hi!&lt;/p&gt;\n\n&lt;p&gt;Some days ago, I made a simple CLI that lets you scrape a site, using CSS selectors. It accepts an optional Python oneliner to process data and the `requests.request` parameters&lt;/p&gt;\n\n&lt;p&gt;Here&amp;#39;s the URL: &lt;a href="https://github.com/ZSendokame/CScrape"&gt;https://github.com/ZSendokame/CScrape&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;It can be used like this:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;python -m cscrape \n    --url &amp;quot;website&amp;quot;  # URL to scrape\n    --select &amp;quot;a&amp;quot;  # CSS Selector to use\n    --oneliner &amp;quot;&amp;#39;\\n&amp;#39;.join([tag.text for tag in nodes])&amp;quot;  # Optional oneliner\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If you have any idea, please share it to improve the CLI!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;', 'likes': None, 'suggested_sort': None, 'banned_at_utc': None, 'view_count': None, 'archived': False, 'no_follow': False, 'is_crosspostable': False, 'pinned': False, 'over_18': False, 'preview': {'images': [{'source': {'url': 'https://external-preview.redd.it/BcCAOw1BwJ9_X3cp6K6nHhLzFdKA9ePJ0oT9-RhdjPo.jpg?auto=webp&amp;v=enabled&amp;s=2a267756e2632daf51c799289147b76bdc9896ca', 'width': 1200, 'height': 600}, 'resolutions': [{'url': 'https://external-preview.redd.it/BcCAOw1BwJ9_X3cp6K6nHhLzFdKA9ePJ0oT9-RhdjPo.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;v=enabled&amp;s=f31af843e0053696be3e6d9ca1227ada3682afdd', 'width': 108, 'height': 54}, {'url': 'https://external-preview.redd.it/BcCAOw1BwJ9_X3cp6K6nHhLzFdKA9ePJ0oT9-RhdjPo.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;v=enabled&amp;s=11533e54fa4954fedb9ba779e286718709dc02a7', 'width': 216, 'height': 108}, {'url': 'https://external-preview.redd.it/BcCAOw1BwJ9_X3cp6K6nHhLzFdKA9ePJ0oT9-RhdjPo.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;v=enabled&amp;s=2f81694ecd594aaa524e83b7a4ae90d485f8cde2', 'width': 320, 'height': 160}, {'url': 'https://external-preview.redd.it/BcCAOw1BwJ9_X3cp6K6nHhLzFdKA9ePJ0oT9-RhdjPo.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;v=enabled&amp;s=ef012acf60e45d6526f12cc21a111d00602f13bb', 'width': 640, 'height': 320}, {'url': 'https://external-preview.redd.it/BcCAOw1BwJ9_X3cp6K6nHhLzFdKA9ePJ0oT9-RhdjPo.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;v=enabled&amp;s=e942bf3844bfd717be12811cac9754361f6a6d19', 'width': 960, 'height': 480}, {'url': 'https://external-preview.redd.it/BcCAOw1BwJ9_X3cp6K6nHhLzFdKA9ePJ0oT9-RhdjPo.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;v=enabled&amp;s=ad26a183c8e3aa36d7270b737656ffa5570f1d3a', 'width': 1080, 'height': 540}], 'variants': {}, 'id': 'RuADnh9YeyhcfXBciK4vUAyrGQ6qp_2qi-xLCy6u67A'}], 'enabled': False}, 'all_awardings': [], 'awarders': [], 'media_only': False, 'link_flair_template_id': '1678450a-cfa2-11ea-830c-0e5035839c63', 'can_gild': False, 'spoiler': False, 'locked': False, 'author_flair_text': None, 'treatment_tags': [], 'visited': False, 'removed_by': None, 'num_reports': None, 'distinguished': None, 'subreddit_id': 't5_2qh0y', 'author_is_blocked': False, 'mod_reason_by': None, 'removal_reason': None, 'link_flair_background_color': '#73ad34', 'id': '11crk7n', 'is_robot_indexable': True, 'report_reasons': None, 'author': 'Sendokame', 'discussion_type': None, 'num_comments': 0, 'send_replies': True, 'whitelist_status': 'all_ads', 'contest_mode': False, 'mod_reports': [], 'author_patreon_flair': False, 'author_flair_text_color': None, 'permalink': '/r/Python/comments/11crk7n/web_scraping_from_the_terminal/', 'parent_whitelist_status': 'all_ads', 'stickied': False, 'url': 'https://www.reddit.com/r/Python/comments/11crk7n/web_scraping_from_the_terminal/', 'subreddit_subscribers': 1106345, 'created_utc': 1677442958.0, 'num_crossposts': 0, 'media': None, 'is_video': False}}, {'kind': 't3', 'data': {'approved_at_utc': None, 'subreddit': 'Python', 'selftext': 'Disclaimer: The problem is fixed; I don\'t need support.\n\nI wanted to install a project which used torch on a new computer, and I installed Python 3.11. As you may know, Torch only supports python 3.10, not 3.11. When I use pip to try and install Torch onto this particular python installation, I get this:\n\n&gt; ERROR: Could not find a version that satisfies the requirement torch (from versions: none)\n\nObviously, as a programmer I understand what this means. "No versions are available to install so I can\'t find your package. Sorry." But as a user whose brain isn\'t always in programming mode, this is a ridiculously unhelpful error because it requires me to consider the possibility that a package may not be available for my Python version, without explicitly telling me so. All it tells me is that this really popular package--which I *know* is *definitely* available--is not actually available.\n\nTo make things worse, when I try to install the actual project that relies on torch, it doesn\'t tell me any of the above; it just tells me there is a dependency conflict caused by Torch. This seems a bit like telling me you\'re having an argument with a thin stretch of air. How can there be a conflict when Torch itself is not even installed, and the only thing relying on it is the other thing i\'m trying to install? I guess the "conflict" is that the dependency can\'t be installed, but then why can\'t it just ... say that?\n\nI work with Linux servers every day. This still does not seem user-friendly, at all. Am I missing something or is this just one of those charming little quirks everyone puts up with because that\'s the way it\'s always been?', 'author_fullname': 't2_sffr3', 'saved': False, 'mod_reason_title': None, 'gilded': 0, 'clicked': False, 'title': "Why can't Pip just tell me my python version is too new? Someone please make this make sense to me.", 'link_flair_richtext': [{'e': 'text', 't': 'Discussion'}], 'subreddit_name_prefixed': 'r/Python', 'hidden': False, 'pwls': 6, 'link_flair_css_class': 'discussion', 'downs': 0, 'thumbnail_height': None, 'top_awarded_type': None, 'hide_score': False, 'name': 't3_11c69yz', 'quarantine': False, 'link_flair_text_color': 'dark', 'upvote_ratio': 0.86, 'author_flair_background_color': None, 'subreddit_type': 'public', 'ups': 85, 'total_awards_received': 0, 'media_embed': {}, 'thumbnail_width': None, 'author_flair_template_id': None, 'is_original_content': False, 'user_reports': [], 'secure_media': None, 'is_reddit_media_domain': False, 'is_meta': False, 'category': None, 'secure_media_embed': {}, 'link_flair_text': 'Discussion', 'can_mod_post': False, 'score': 85, 'approved_by': None, 'is_created_from_ads_ui': False, 'author_premium': True, 'thumbnail': 'self', 'edited': False, 'author_flair_css_class': None, 'author_flair_richtext': [], 'gildings': {}, 'content_categories': None, 'is_self': True, 'mod_note': None, 'created': 1677389092.0, 'link_flair_type': 'richtext', 'wls': 6, 'removed_by_category': None, 'banned_by': None, 'author_flair_type': 'text', 'domain': 'self.Python', 'allow_live_comments': False, 'selftext_html': '&lt;!-- SC_OFF --&gt;&lt;div class="md"&gt;&lt;p&gt;Disclaimer: The problem is fixed; I don&amp;#39;t need support.&lt;/p&gt;\n\n&lt;p&gt;I wanted to install a project which used torch on a new computer, and I installed Python 3.11. As you may know, Torch only supports python 3.10, not 3.11. When I use pip to try and install Torch onto this particular python installation, I get this:&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;ERROR: Could not find a version that satisfies the requirement torch (from versions: none)&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Obviously, as a programmer I understand what this means. &amp;quot;No versions are available to install so I can&amp;#39;t find your package. Sorry.&amp;quot; But as a user whose brain isn&amp;#39;t always in programming mode, this is a ridiculously unhelpful error because it requires me to consider the possibility that a package may not be available for my Python version, without explicitly telling me so. All it tells me is that this really popular package--which I &lt;em&gt;know&lt;/em&gt; is &lt;em&gt;definitely&lt;/em&gt; available--is not actually available.&lt;/p&gt;\n\n&lt;p&gt;To make things worse, when I try to install the actual project that relies on torch, it doesn&amp;#39;t tell me any of the above; it just tells me there is a dependency conflict caused by Torch. This seems a bit like telling me you&amp;#39;re having an argument with a thin stretch of air. How can there be a conflict when Torch itself is not even installed, and the only thing relying on it is the other thing i&amp;#39;m trying to install? I guess the &amp;quot;conflict&amp;quot; is that the dependency can&amp;#39;t be installed, but then why can&amp;#39;t it just ... say that?&lt;/p&gt;\n\n&lt;p&gt;I work with Linux servers every day. This still does not seem user-friendly, at all. Am I missing something or is this just one of those charming little quirks everyone puts up with because that&amp;#39;s the way it&amp;#39;s always been?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;', 'likes': None, 'suggested_sort': None, 'banned_at_utc': None, 'view_count': None, 'archived': False, 'no_follow': False, 'is_crosspostable': False, 'pinned': False, 'over_18': False, 'all_awardings': [], 'awarders': [], 'media_only': False, 'link_flair_template_id': '0df42996-1c5e-11ea-b1a0-0e44e1c5b731', 'can_gild': False, 'spoiler': False, 'locked': False, 'author_flair_text': None, 'treatment_tags': [], 'visited': False, 'removed_by': None, 'num_reports': None, 'distinguished': None, 'subreddit_id': 't5_2qh0y', 'author_is_blocked': False, 'mod_reason_by': None, 'removal_reason': None, 'link_flair_background_color': '', 'id': '11c69yz', 'is_robot_indexable': True, 'report_reasons': None, 'author': 'SLJ7', 'discussion_type': None, 'num_comments': 37, 'send_replies': True, 'whitelist_status': 'all_ads', 'contest_mode': False, 'mod_reports': [], 'author_patreon_flair': False, 'author_flair_text_color': None, 'permalink': '/r/Python/comments/11c69yz/why_cant_pip_just_tell_me_my_python_version_is/', 'parent_whitelist_status': 'all_ads', 'stickied': False, 'url': 'https://www.reddit.com/r/Python/comments/11c69yz/why_cant_pip_just_tell_me_my_python_version_is/', 'subreddit_subscribers': 1106345, 'created_utc': 1677389092.0, 'num_crossposts': 0, 'media': None, 'is_video': False}}], 'before': 't3_11dgk0b'}}
A no nonsense guide for adding columns to a df
PyCon US grants free booth space and conference passes to early-stage startups, and applications close Sunday at midnight Pacific Time
A new implementation of a high-precision integrator algorithm for systems of second order differential equations
🐍 Very clear Pydantic Introduction Video
Can Python, related software and Anaconda take advantage of more GPU-core of Apple's M1 Max and M2 Max chips?
Starlite February Updates
Cython 3.0 beta 1 is released
hyper-bump-it: Bump the version for a software release
Building an instantaneous application using Python and WebSockets [Part 2]
convtools: are we really DRY?
Open-source alerting CLI
Is there a way to automate writing unit tests?
Best python course for a carrier change.
Pydantic Introduction - Models, Fields, Constrained Types, Validator Functions and Model Exports
I wrote an enumclass decorator you may find useful... It turns your class type into an enumeration type
First Project: Create table from subtraction tool
Streamlining Event-Driven Architecture with Knative Channels and SinkBinding
Python is two languages now, and that's actually great
Web scraping from the terminal
Why can't Pip just tell me my python version is too new? Someone please make this make sense to me.
